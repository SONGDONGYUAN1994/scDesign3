[{"path":"/articles/scDesign3-CITEseq-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulate CITE-seq data","text":"tutorial, show use scDesign3 simulate CITE-seq data illustrate similarity inputted reference data synthetic data.","code":""},{"path":"/articles/scDesign3-CITEseq-vignette.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"Simulate CITE-seq data","text":"save computational time, use top 100 genes six genes protein RNA abundance information.","code":"example_sce <- readRDS((url(\"https://www.dropbox.com/sh/0tptrft7hsstpi3/AAA2ly7fk9Ge98YB3FbiMtR9a/CITE_sce.rds?raw=1\"))) print(example_sce) keep_gene <- c(\"CD4\",  \"CD14\", \"CD19\", \"CD34\", \"CD3E\", \"CD8A\") keep_adt <- c(\"ADT_CD4\", \"ADT_CD14\", \"ADT_CD19\", \"ADT_CD34\", \"ADT_CD3\", \"ADT_CD8\") keep <- c(keep_gene, keep_adt) idx <- which(rownames(example_sce) %in% keep) idx <- c(1:100,idx) example_sce <- example_sce[idx,] logcounts(example_sce) <- log1p(counts(example_sce))"},{"path":"/articles/scDesign3-CITEseq-vignette.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Simulate CITE-seq data","text":"input reference data use one-shot scdesign3() function simulate CITE-seq dat using discrete cell types covariates fitting gene’s marginal distribution. simulation, can create SinglecellExperiment object using synthetic count matrix store logcounts input synthetic SinglecellExperiment objects. , obtained PCA UMAP inputted reference data synthetic data. sets embedding used visualization .","code":"set.seed(123) example_simu <- scdesign3(     sce = example_sce,     assay_use = \"counts\",     celltype = \"cell_type\",     pseudotime = NULL,     spatial = NULL,     other_covariates = NULL,     mu_formula = \"cell_type\",     sigma_formula = \"cell_type\",     family_use = \"nb\",     n_cores = 2,     usebam = FALSE,     corr_formula = \"cell_type\",     copula = \"vine\",     DT = TRUE,     pseudo_obs = FALSE,     return_model = FALSE,     nonzerovar = TRUE,     nonnegative = TRUE   ) logcounts(example_sce) <- log1p(counts(example_sce)) simu_sce <- example_sce counts(simu_sce) <- example_simu$new_count logcounts(simu_sce) <- log1p(counts(simu_sce)) train_pca_fit <- irlba::prcomp_irlba(t(log1p(counts(example_sce))),                                            center = TRUE,                                            scale. = FALSE,                                            n = 50) reducedDim(simu_sce, \"PCA\") <- predict(train_pca_fit, newdata= t(log1p(counts(simu_sce)))) simu_pac_fit <- predict(train_pca_fit, newdata= t(logcounts(simu_sce))) train_umap_fit <- umap::umap(train_pca_fit$x, n_neighbors = 15, min_dist = 0.1) simu_umap_fit <-  predict(object = train_umap_fit, data= (reducedDim(simu_sce, \"PCA\"))) colnames(simu_umap_fit ) <- c(\"UMAP1\", \"UMAP2\") reducedDim(simu_sce, \"UMAP\") <- simu_umap_fit  train_umap <- train_umap_fit$layout rownames(train_umap) <- colnames(example_sce) colnames(train_umap) <- c(\"UMAP1\", \"UMAP2\")"},{"path":"/articles/scDesign3-CITEseq-vignette.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Simulate CITE-seq data","text":"visualize results, select six genes reformat UMAP embedding got previous step. Six genes’ protein RNA abundances shown cell UMAP embeddings inputted reference data synthetic data .","code":"expression_train <- as.matrix(logcounts(example_sce))[c(keep_gene ,keep_adt), ] %>% t()  %>% as_tibble() %>% bind_cols(train_umap) %>% dplyr::mutate(Method = \"Train data\") expression_scDesign3 <- as.matrix(logcounts(simu_sce))[c(keep_gene ,keep_adt), ] %>% t() %>% as_tibble() %>% bind_cols(simu_umap_fit) %>% dplyr::mutate(Method = \"scDesign3\") CITE_dat <- bind_rows(expression_train, expression_scDesign3) %>% as_tibble() %>%             dplyr::mutate_at(vars(-c(UMAP1, UMAP2, Method)), funs(scales::rescale)) %>% tidyr::pivot_longer(-c(\"UMAP1\", \"UMAP2\", \"Method\"), names_to = \"Feature\", values_to = \"Expression\") %>% dplyr::mutate(Type = if_else(str_detect(Feature, \"ADT\"), \"Protein\", \"RNA\")) %>% dplyr::mutate(Gene = str_replace(Feature, \"ADT_\", \"\")) %>% dplyr::mutate(Gene = if_else(Gene == \"CD3E\", \"CD3\", Gene))%>% dplyr::mutate(Gene = if_else(Gene == \"CD8A\", \"CD8\", Gene))%>% dplyr::filter(Gene %in% c(\"CD14\", \"CD3\", \"CD8\", \"CD19\")) %>% dplyr::mutate(Gene = factor(Gene, levels = c(\"CD3\", \"CD8\", \"CD14\", \"CD19\"))) %>% dplyr::mutate(Method = factor(Method, levels = c(\"Train data\", \"scDesign3\"))) #> Warning: `funs()` was deprecated in dplyr 0.8.0. #> ℹ Please use a list of either functions or lambdas: #>  #> # Simple named list: list(mean = mean, median = median) #>  #> # Auto named with `tibble::lst()`: tibble::lst(mean, median) #>  #> # Using lambdas list(~ mean(., trim = .2), ~ median(., na.rm = TRUE)) head(CITE_dat) #> # A tibble: 6 × 7 #>     UMAP1 UMAP2 Method     Feature  Expression Type    Gene  #>     <dbl> <dbl> <fct>      <chr>         <dbl> <chr>   <fct> #> 1 -0.0397 -14.1 Train data CD14          0     RNA     CD14  #> 2 -0.0397 -14.1 Train data CD19          0     RNA     CD19  #> 3 -0.0397 -14.1 Train data CD3E          0     RNA     CD3   #> 4 -0.0397 -14.1 Train data CD8A          0     RNA     CD8   #> 5 -0.0397 -14.1 Train data ADT_CD14      0.623 Protein CD14  #> 6 -0.0397 -14.1 Train data ADT_CD19      0.527 Protein CD19 CITE_dat  %>% ggplot(aes(x = UMAP1, y = UMAP2, color = Expression)) + geom_point(size = 0.1, alpha = 0.5) + scale_colour_gradientn(colors = viridis_pal(option = \"A\", direction = -1)(10), limits=c(0, 1)) + coord_fixed(ratio = 1) + facet_nested(Method ~ Gene + Type ) + theme(aspect.ratio = 1, legend.position = \"bottom\")  + theme(aspect.ratio = 1, legend.position = \"right\") + theme(     panel.grid.minor = element_blank(),     panel.grid.major = element_blank(),     axis.text.x=element_blank(),     axis.ticks.x=element_blank(),     axis.text.y=element_blank(),     axis.ticks.y=element_blank())"},{"path":"/articles/scDesign3-CITEseq-vignette.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Simulate CITE-seq data","text":"","code":"sessionInfo() #> R version 4.2.2 Patched (2022-11-10 r83330) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] ggh4x_0.2.3                 scales_1.2.1                #>  [3] tidyr_1.2.1                 stringr_1.5.0               #>  [5] ggplot2_3.4.0               dplyr_1.0.10                #>  [7] SingleCellExperiment_1.20.0 SummarizedExperiment_1.28.0 #>  [9] Biobase_2.58.0              GenomicRanges_1.50.2        #> [11] GenomeInfoDb_1.34.6         IRanges_2.32.0              #> [13] S4Vectors_0.36.1            BiocGenerics_0.44.0         #> [15] MatrixGenerics_1.10.0       matrixStats_0.63.0          #> [17] scDesign3_0.99.1            BiocStyle_2.24.0            #>  #> loaded via a namespace (and not attached): #>  [1] nlme_3.1-162           bitops_1.0-7           fs_1.5.2               #>  [4] rprojroot_2.0.3        tools_4.2.2            bslib_0.4.2            #>  [7] utf8_1.2.2             R6_2.5.1               irlba_2.3.5.1          #> [10] DBI_1.1.3              mgcv_1.8-41            colorspace_2.0-3       #> [13] withr_2.5.0            tidyselect_1.2.0       compiler_4.2.2         #> [16] textshaping_0.3.6      cli_3.6.0              desc_1.4.2             #> [19] DelayedArray_0.24.0    labeling_0.4.2         bookdown_0.31          #> [22] sass_0.4.4             askpass_1.1            gamlss_5.4-10          #> [25] pkgdown_2.0.7          systemfonts_1.0.4      digest_0.6.31          #> [28] rvinecopulib_0.6.2.1.3 rmarkdown_2.19         XVector_0.38.0         #> [31] pkgconfig_2.0.3        htmltools_0.5.4        umap_0.2.9.0           #> [34] highr_0.10             fastmap_1.1.0          rlang_1.0.6            #> [37] farver_2.1.1           jquerylib_0.1.4        generics_0.1.3         #> [40] gamlss.data_6.0-2      jsonlite_1.8.4         mclust_6.0.0           #> [43] RCurl_1.98-1.9         magrittr_2.0.3         GenomeInfoDbData_1.2.9 #> [46] Matrix_1.5-1           Rcpp_1.0.9             munsell_0.5.0          #> [49] fansi_1.0.3            reticulate_1.27        lifecycle_1.0.3        #> [52] stringi_1.7.12         yaml_2.3.6             MASS_7.3-58.2          #> [55] zlibbioc_1.44.0        gamlss.dist_6.0-5      grid_4.2.2             #> [58] parallel_4.2.2         lattice_0.20-45        splines_4.2.2          #> [61] kde1d_1.0.5            knitr_1.41             pillar_1.8.1           #> [64] randtoolbox_2.0.3      glue_1.6.2             evaluate_0.19          #> [67] BiocManager_1.30.19    png_0.1-8              vctrs_0.5.1            #> [70] gtable_0.3.1           openssl_2.0.5          purrr_1.0.1            #> [73] assertthat_0.2.1       cachem_1.0.6           xfun_0.36              #> [76] rngWELL_0.10-8         RSpectra_0.16-1        viridisLite_0.4.1      #> [79] ragg_1.2.5             survival_3.5-3         tibble_3.1.8           #> [82] memoise_2.0.1          ellipsis_0.3.2"},{"path":[]},{"path":"/articles/scDesign3-DEanalysis-vignette.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"Identification of DE genes between discrete cell types","what":"Read in the reference data","title":"Benchmarking DE Analysis with scDesign3","text":"raw data R package DuoClustering2018 contain set datasets various clustering results. top 200 highly variable genes kept generating synthetic data. extract B cells regulatory T cells use cells two cell types simulate synthetic data.","code":"Zhengmix4eq_sce <- get(\"sce_filteredExpr10_Zhengmix4eq\")(metadata = FALSE) ngene <- 200 logcounts(Zhengmix4eq_sce) <- log1p(counts(Zhengmix4eq_sce)) dec.seurat_obj <- modelGeneVar(Zhengmix4eq_sce) chosen <- getTopHVGs(Zhengmix4eq_sce, n = ngene) example_sce <- Zhengmix4eq_sce[chosen,] selected_cells <- which(colData(example_sce)$phenoid %in% c(\"b.cells\",\"regulatory.t\")) example_sce <- example_sce[,selected_cells] colData(example_sce)$cell_type <- as.factor(colData(example_sce)$phenoid) example_sce head(colData(example_sce))"},{"path":"/articles/scDesign3-DEanalysis-vignette.html","id":"simulation","dir":"Articles","previous_headings":"Identification of DE genes between discrete cell types","what":"Simulation","title":"Benchmarking DE Analysis with scDesign3","text":"use step--step functions instead one-shot function generate synthetic data since step--step functions allow us alter estimated parameters generate new data based desired parameters. , examine mean_mat, one outputs previous function extract_para(). gene, calculate difference maximum mean parameter minimum mean parameter across cells. select genes gene’s mean difference across cells top 50 largest differences. regard genes DE genes. , manually set mean parameters rest genes across cells. regard genes mean parameter across cells non-DE genes. course, flexible step users may choose ideas modify mean matrix.","code":"set.seed(1) example_data <- construct_data(     sce = example_sce,     assay_use = \"counts\",     celltype = \"cell_type\",     pseudotime = NULL,     spatial = NULL,     other_covariates = NULL,     corr_by = \"1\"   ) example_marginal <- fit_marginal(     data = example_data,     predictor = \"gene\",     mu_formula = \"cell_type\",     sigma_formula = \"1\",     family_use = \"nb\",     n_cores = 2,     usebam = FALSE   ) example_copula <- fit_copula(     sce = example_sce,     assay_use = \"counts\",     marginal_list = example_marginal,     family_use = \"nb\",     copula = \"gaussian\",     n_cores = 2,     new_covariate = NULL,     input_data = example_data$dat   ) example_para <- extract_para(     sce = example_sce,     marginal_list = example_marginal,     n_cores = 1,     family_use = \"nb\",     new_covariate = NULL   ) diff <- apply(example_para$mean_mat, 2, function(x){max(x)-min(x)}) diff_ordered <- order(diff, decreasing = TRUE) diff <- diff[diff_ordered] num_de <- 50 de_idx <- names(diff[1:num_de]) non_de_idx <- names(diff[-(1:num_de)]) non_de_mat <- apply(example_para$mean_mat[,non_de_idx], 2, function(x){   avg <- (max(x)+min(x))/2   new_mean <- rep(avg, length(x))   return(new_mean) }) example_para$mean_mat[,non_de_idx] <- non_de_mat example_newcount <- simu_new(     sce = example_sce,     mean_mat = example_para$mean_mat,     sigma_mat = example_para$sigma_mat,     zero_mat = example_para$zero_mat,     quantile_mat = NULL,     copula_list = example_copula$copula_list,     n_cores = 1,     family_use = \"nb\",     input_data = example_data$dat,     new_covariate = example_data$newCovariate,     important_feature = example_copula$important_feature   )"},{"path":"/articles/scDesign3-DEanalysis-vignette.html","id":"de-genes-identification","dir":"Articles","previous_headings":"Identification of DE genes between discrete cell types","what":"DE genes identification","title":"Benchmarking DE Analysis with scDesign3","text":", follow Seurat’s pipeline preprocess simulated data. Since already ground truth cell type annotations simulated dataset, can directly use cell type annotations instead running FindClusters Seurat avoid double-dipping issue. , follow Seurat’s tutorial conduct DE test. Since manually created non-DE genes extra_para() step, now can calculate actual false discovery proportion(FDP) power DE tests conducted various target FDR threshold. Lastly, visualize Target FDR vs Actual FDP Target FDR vs Power .","code":"seurat_obj <- CreateSeuratObject(counts = example_newcount, project = \"seurat_obj\", min.cells = 0, min.features = 0) seurat_obj[[\"percent.mt\"]] <- PercentageFeatureSet(seurat_obj, pattern = \"^MT-\") seurat_obj <- NormalizeData(seurat_obj, normalization.method = \"LogNormalize\", scale.factor = 10000) seurat_obj <- FindVariableFeatures(seurat_obj, selection.method = \"vst\",nfeatures = 200) all.genes <- rownames(seurat_obj) seurat_obj <- ScaleData(seurat_obj, features = all.genes) seurat_obj <- RunPCA(seurat_obj, features = VariableFeatures(object = seurat_obj)) seurat_obj <- JackStraw(seurat_obj, num.replicate = 100) seurat_obj <- ScoreJackStraw(seurat_obj, dims = 1:20) seurat_obj <- FindNeighbors(seurat_obj, dims = 1:10) ct <- colData(example_sce)$cell_type names(ct) <- colnames(example_sce) seurat_obj[[\"cell_type\"]] <- ct Idents(seurat_obj) <- \"cell_type\" seurat_obj <- RunUMAP(seurat_obj, dims = 1:10) test <- c(\"wilcox\", \"bimod\", \"t\", \"poisson\", \"negbinom\", \"LR\", \"MAST\", \"DESeq2\") qvals <- matrix(0, nrow = dim(seurat_obj)[1], ncol = length(test)) for (x in 1:length(test)) {   markers <- FindMarkers(seurat_obj, ident.1 = \"b.cells\", ident.2 = \"regulatory.t\", test.use = test[x],                          logfc.threshold = 0, min.pct = 0, min.cells.feature = 1, min.cells.group = 1)   qvals[,x] <- p.adjust(markers[rownames(seurat_obj),\"p_val\"], method = \"BH\", length(rownames(seurat_obj))) } colnames(qvals) <- test rownames(qvals) <- rownames(seurat_obj) targetFDR <- c(seq(0.01,0.1,by=0.01),seq(0.2,0.5,by=0.1)) de <-de_idx fdp_mat <- matrix(0, nrow = length(targetFDR), ncol = length(test)) colnames(fdp_mat) <- test rownames(fdp_mat) <- targetFDR power_mat <- matrix(0, nrow = length(targetFDR), ncol = length(test)) colnames(power_mat) <- test rownames(power_mat) <- targetFDR  for (t in 1:length(test)) {   curr_p = qvals[,t]   for (i in 1:length(targetFDR)) {     thre <- targetFDR[i]     discovery <- which(curr_p <= thre)     tp <- length(intersect(names(discovery),de))     if(length(discovery) == 0){       fdp <- 0     }else{       fdp <- (length(discovery) - tp)/length(discovery)     }     power <- tp/length(de)     fdp_mat[i, t] <- fdp     power_mat[i,t] <- power   } } fdp_long <- melt(fdp_mat) colnames(fdp_long) <- c(\"Target FDR\",\"test_method\",\"Actual FDP\") fdp_plot <- ggplot(fdp_long) +   geom_line(aes(x=`Target FDR`, y=`Actual FDP`,color=test_method))+   geom_point(aes(x=`Target FDR`, y=`Actual FDP`,color=test_method))+   geom_abline(intercept = 0, slope=1,linetype=\"dashed\",color=\"grey\")+   theme(aspect.ratio = 1) + expand_limits(x = 0, y = c(0,1)) fdp_plot power_long <- melt(power_mat) colnames(power_long) <- c(\"Target FDR\",\"test_method\",\"Power\") power_plot <- ggplot(power_long) +   geom_line(aes(x=`Target FDR`, y=Power,color=test_method))+   geom_point(aes(x=`Target FDR`, y=Power,color=test_method))+   theme(aspect.ratio = 1) power_plot"},{"path":[]},{"path":"/articles/scDesign3-DEanalysis-vignette.html","id":"read-in-the-reference-data-1","dir":"Articles","previous_headings":"Identification of DE genes along a trajectory","what":"Read in the reference data","title":"Benchmarking DE Analysis with scDesign3","text":"raw data scvelo, describes pancreatic endocrinogenesis. pre-select top 1000 highly variable genes filter cell types ensure single trajectory. save computational time, use top 200 genes.","code":"example_sce <- readRDS((url(\"https://www.dropbox.com/s/p1mvl5osxp55sot/PANCREAS_sce.rds?raw=1\"))) print(example_sce) #> class: SingleCellExperiment  #> dim: 1000 2087  #> metadata(5): clusters_coarse_colors clusters_colors day_colors #>   neighbors pca #> assays(6): X spliced ... cpm logcounts #> rownames(1000): Pyy Iapp ... Eya2 Kif21a #> rowData names(1): highly_variable_genes #> colnames(2087): AAACCTGAGAGGGATA AAACCTGGTAAGTGGC ... TTTGTCAAGTGACATA #>   TTTGTCAAGTGTGGCA #> colData names(7): clusters_coarse clusters ... sizeFactor pseudotime #> reducedDimNames(4): X_pca X_umap PCA UMAP #> mainExpName: NULL #> altExpNames(0): example_sce <- example_sce[1:200, ]"},{"path":"/articles/scDesign3-DEanalysis-vignette.html","id":"simulation-1","dir":"Articles","previous_headings":"Identification of DE genes along a trajectory","what":"Simulation","title":"Benchmarking DE Analysis with scDesign3","text":"use step--step functions instead one-shot function generate synthetic data since step--step functions allow us alter estimated parameters generate new data based desired parameters. , examine mean_mat, one outputs previous function extract_para(). gene, calculate difference maximum mean parameter minimum mean parameter across cells. select genes gene’s mean difference across cells top 50 largest differences. regard genes DE genes(DEG). , manually set mean parameters rest genes across cells. regard genes mean parameter across cells non-DE genes.","code":"set.seed(1) PANCREAS_data <- construct_data(     sce = example_sce,     assay_use = \"counts\",     celltype = \"cell_type\",     pseudotime = \"pseudotime\",     spatial = NULL,     other_covariates = NULL,     corr_by = \"1\"   ) PANCREAS_marginal <- fit_marginal(     data = PANCREAS_data,     predictor = \"gene\",     mu_formula = \"s(pseudotime, k = 10, bs = 'cr')\",     sigma_formula = \"s(pseudotime, k = 5, bs = 'cr')\",     family_use = \"nb\",     n_cores = 2,     usebam = FALSE   ) PANCREAS_copula <- fit_copula(     sce = example_sce,     assay_use = \"counts\",     marginal_list = PANCREAS_marginal,     family_use = \"nb\",     copula = \"gaussian\",     n_cores = 2,     new_covariate = NULL,     input_data = PANCREAS_data$dat   ) PANCREAS_para <- extract_para(     sce = example_sce,     marginal_list = PANCREAS_marginal,     n_cores = 1,     family_use = \"nb\",     new_covariate = NULL   ) diff <- apply(PANCREAS_para$mean_mat, 2, function(x){max(x)-min(x)}) diff_ordered <- order(diff, decreasing = TRUE) diff <- diff[diff_ordered] num_de <- 50 de_idx <- names(diff[1:num_de]) non_de_idx <- names(diff[-(1:num_de)]) non_de_mat <- apply(PANCREAS_para$mean_mat[,non_de_idx], 2, function(x){   avg <- mean(x)   new_mean <- rep(avg, length(x))   return(new_mean) }) PANCREAS_para$mean_mat[,non_de_idx] <- non_de_mat PANCREAS_newcount <- simu_new(     sce = example_sce,     mean_mat = PANCREAS_para$mean_mat,     sigma_mat = PANCREAS_para$sigma_mat,     zero_mat = PANCREAS_para$zero_mat,     quantile_mat = NULL,     copula_list = PANCREAS_copula$copula_list,     n_cores = 1,     family_use = \"nb\",     input_data = PANCREAS_data$dat,     new_covariate = PANCREAS_data$newCovariate,     important_feature = PANCREAS_copula$important_feature   ) logcounts(example_sce) <- log1p(counts(example_sce)) simu_sce <- example_sce counts(simu_sce) <-  PANCREAS_newcount logcounts(simu_sce) <- log1p(counts(simu_sce))"},{"path":"/articles/scDesign3-DEanalysis-vignette.html","id":"de-genes-identification-1","dir":"Articles","previous_headings":"Identification of DE genes along a trajectory","what":"DE genes identification","title":"Benchmarking DE Analysis with scDesign3","text":"Now, use simulated data benchmark performance four DEG identification methods. p-values two methods Benjamini-Hochberg(BH) corretion stored qvals following code.","code":"qvals <- matrix(0, ncol = 4, nrow = dim(simu_sce)[1]) colnames(qvals) <- c(\"Monocle3-DE\",\"tradeSeq\",\"NBAMseq\",\"PseudotimeDE\") rownames(qvals) <- rownames(simu_sce)"},{"path":"/articles/scDesign3-DEanalysis-vignette.html","id":"monocle3","dir":"Articles","previous_headings":"Identification of DE genes along a trajectory > DE genes identification","what":"Monocle3","title":"Benchmarking DE Analysis with scDesign3","text":"follow tutorial Monocle3 conduct DE test obtain p-values BH correction.","code":"rowdata <- rowData(simu_sce) rowdata$gene_short_name <- rownames(rowData(simu_sce)) coldata <- colData(simu_sce) cds <- new_cell_data_set(counts(simu_sce),                            cell_metadata = coldata,                            gene_metadata = rowdata) gene_fits <- fit_models(cds, model_formula_str = \"~pseudotime\") fit_coefs <- coefficient_table(gene_fits) fit <- fit_coefs %>% dplyr::filter(term == \"pseudotime\") %>% dplyr::select(p_value, q_value) %>% dplyr::mutate(gene = rownames(simu_sce)) fit qvals[fit$gene,\"Monocle3-DE\"] <- fit$q_value"},{"path":"/articles/scDesign3-DEanalysis-vignette.html","id":"tradeseq","dir":"Articles","previous_headings":"Identification of DE genes along a trajectory > DE genes identification","what":"tradeSeq","title":"Benchmarking DE Analysis with scDesign3","text":"follow tutorial tradeSeq conduct DE test obtain p-values BH correction.","code":"pseudo <- colData(simu_sce)$pseudotime icMat <- evaluateK(counts = counts(simu_sce), pseudotime  = pseudo, cellWeights = rep(1, dim(simu_sce)[2]), k = 3:10, nGenes = 100, verbose = FALSE, plot = TRUE) res_tradeSeq <- fitGAM(counts = as.matrix(assays(simu_sce)$counts), pseudotime = pseudo, cellWeights = rep(1, length(pseudo)),nknots = 10) assoRes <- associationTest(res_tradeSeq, lineages = FALSE) assoRes <- assoRes %>% as_tibble(rownames = \"gene\") %>% dplyr::mutate(qvalue = p.adjust(pvalue, method = \"BH\")) qvals[assoRes$gene,\"tradeSeq\"] <- assoRes$qvalue"},{"path":"/articles/scDesign3-DEanalysis-vignette.html","id":"nbamseq","dir":"Articles","previous_headings":"Identification of DE genes along a trajectory > DE genes identification","what":"NBAMseq","title":"Benchmarking DE Analysis with scDesign3","text":"follow tutorial NBAMseq conduct DE test obtain p-values BH correction.","code":"countdata <- counts(simu_sce) coldata <- colData(simu_sce) design = ~s(pseudotime) gsd = NBAMSeqDataSet(countData = countdata, colData = coldata, design = design) gsd = NBAMSeq(gsd)  res1 = NBAMSeq::results(gsd, name = \"pseudotime\") head(res1) qvals[rownames(res1),\"NBAMseq\"] = res1$padj"},{"path":"/articles/scDesign3-DEanalysis-vignette.html","id":"pseudotimede","dir":"Articles","previous_headings":"Identification of DE genes along a trajectory > DE genes identification","what":"PseudotimeDE","title":"Benchmarking DE Analysis with scDesign3","text":"follow tutorial PseudotimeDE conduct DE test obtain p-values BH correction. save computational time, use fix-mode PseudotimeDE. Since tradeSeq’s result contains NA, convert NA 1 first. Since manually created non-DE genes extra_para() step, now can calculate actual false discovery proportion(FDP) power DE tests conducted various target FDR threshold. Lastly, visualize Target FDR vs Actual FDP Target FDR vs Power .","code":"ori_tbl <- tibble(cell = colnames(simu_sce), pseudotime = colData(simu_sce)$pseudotime) res <- runPseudotimeDE(gene.vec = rownames(simu_sce),                                      ori.tbl = ori_tbl,                                      sub.tbl = NULL,                                       mat = simu_sce,                                       model = \"nb\") qvals[res$gene,\"PseudotimeDE\"] <- p.adjust(res$fix.pv, method = \"BH\", length(res$gene)) qvals[is.na(qvals)] <- 1 print(head(qvals)) test = colnames(qvals) targetFDR <- c(seq(0.01,0.1,by=0.01),seq(0.2,0.5,by=0.1)) de <- colnames(PANCREAS_para$mean_mat[,de_idx]) fdp_mat <- matrix(0, nrow = length(targetFDR), ncol = length(test)) colnames(fdp_mat) <- test rownames(fdp_mat) <- targetFDR power_mat <- matrix(0, nrow = length(targetFDR), ncol = length(test)) colnames(power_mat) <- test rownames(power_mat) <- targetFDR for (t in 1:length(test)) {   curr_p = qvals[,t]   for (i in 1:length(targetFDR)) {     thre <- targetFDR[i]     discovery <- which(curr_p <= thre)     tp <- length(intersect(names(discovery),de))     if(length(discovery) == 0){       fdp <- 0     }else{       fdp <- (length(discovery) - tp)/length(discovery)     }        power <- tp/length(de)     fdp_mat[i, t] <- fdp     power_mat[i,t] <- power   } } fdp_long <- melt(fdp_mat) colnames(fdp_long) <- c(\"Target FDR\",\"test_method\",\"Actual FDP\") fdp_plot <- ggplot(fdp_long) +   geom_line(aes(x=`Target FDR`, y=`Actual FDP`,color=test_method))+   geom_point(aes(x=`Target FDR`, y=`Actual FDP`,color=test_method))+   geom_abline(intercept = 0, slope=1,linetype=\"dashed\",color=\"grey\")+   theme(aspect.ratio = 1) + expand_limits(x = 0, y = c(0,1)) fdp_plot power_long <- melt(power_mat) colnames(power_long) <- c(\"Target FDR\",\"test_method\",\"Power\") power_plot <- ggplot(power_long) +   geom_line(aes(x=`Target FDR`, y=Power,color=test_method))+   geom_point(aes(x=`Target FDR`, y=Power,color=test_method))+   theme(aspect.ratio = 1) power_plot"},{"path":[]},{"path":"/articles/scDesign3-DEanalysis-vignette.html","id":"read-in-the-reference-data-2","dir":"Articles","previous_headings":"Identification of Spatially Variable Genes (SVG) in spatial transcriptomic data","what":"Read in the reference data","title":"Benchmarking DE Analysis with scDesign3","text":"raw data Seurat, dataset generated Visium technology 10x Genomics. pre-select top spatial variable genes. save time, subset top 200 genes. remove mitochondrial genes since preprocessing step SPARK-X, one method use identify spatially variable genes.","code":"example_sce <- readRDS((url(\"https://www.dropbox.com/s/v1uazcl2glirmfe/VISIUM_sce.rds?raw=1\"))) print(example_sce) #> class: SingleCellExperiment  #> dim: 1000 2696  #> metadata(0): #> assays(2): counts logcounts #> rownames(1000): Calb2 Gng4 ... Fndc5 Gda #> rowData names(0): #> colnames(2696): AAACAAGTATCTCCCA-1 AAACACCAATAACTGC-1 ... #>   TTGTTTCACATCCAGG-1 TTGTTTCCATACAACT-1 #> colData names(12): orig.ident nCount_Spatial ... spatial2 cell_type #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): example_sce <- example_sce[1:200, ] mt_idx<- grep(\"mt-\",rownames(example_sce)) if(length(mt_idx)!=0){     example_sce   <- example_sce[-mt_idx,] }"},{"path":"/articles/scDesign3-DEanalysis-vignette.html","id":"simulation-2","dir":"Articles","previous_headings":"Identification of Spatially Variable Genes (SVG) in spatial transcriptomic data","what":"Simulation","title":"Benchmarking DE Analysis with scDesign3","text":"use step--step functions instead one-shot function generate synthetic data since step--step functions allow us alter estimated parameters generate new data based desired parameters. , examine mean_mat, one outputs previous function extract_para(). gene, calculate deviance explained spatial locations regression model, select top 50. regard genes spatially variable genes (SVGs). , manually set mean parameters rest genes across cells. regard genes mean parameter across cells non-SVG genes. Another way select SVG based Moran’s . rescale log count 5 synthetic SVG 0 1 scale visualize .  also rescale log count 5 synthetic non-SVG 0 1 scale visualize .","code":"set.seed(1) example_data <- construct_data(     sce = example_sce,     assay_use = \"counts\",     celltype = \"cell_type\",     pseudotime = NULL,     spatial = c(\"spatial1\", \"spatial2\"),     other_covariates = NULL,     corr_by = \"1\"   ) example_marginal <- fit_marginal(     data = example_data,     predictor = \"gene\",     mu_formula = \"s(spatial1, spatial2, bs = 'gp', k= 50)\",     sigma_formula = \"1\",     family_use = \"nb\",     n_cores = 2,     usebam = FALSE   ) example_copula <- fit_copula(     sce = example_sce,     assay_use = \"counts\",     marginal_list = example_marginal,     family_use = \"nb\",     copula = \"gaussian\",     n_cores = 2,     new_covariate = NULL,     input_data = example_data$dat   ) example_para <- extract_para(     sce = example_sce,     marginal_list = example_marginal,     n_cores = 2,     family_use = \"nb\",     new_covariate = NULL   ) dev_explain <- sapply(example_marginal, function(x){   sum = summary(x)   return(sum$dev.expl) }) dev_ordered <- order(dev_explain, decreasing = TRUE) num_de <- 50 ordered <- dev_explain[dev_ordered] de_idx <- names(ordered)[1:num_de] non_de_idx <- names(ordered)[-(1:num_de)] non_de_mat <- apply(example_para$mean_mat[,non_de_idx], 2, function(x){   avg <- (max(x)+min(x))/2   new_mean <- rep(avg, length(x))   return(new_mean) }) example_para$mean_mat[,non_de_idx] <- non_de_mat # num_de <- 50 # loc = colData(simu_sce)[,c(\"spatial1\",\"spatial2\")] # features = FindSpatiallyVariableFeatures(counts(simu_sce), spatial.location = loc, selection.method = \"moransi\",nfeatures = num_de) # top.features = features[order(features$p.value),] # top.features= rownames(top.features[1:num_de,]) # de_idx <- which(rownames(simu_sce) %in% top.features) # non_de_idx <-which(!rownames(simu_sce) %in% top.features) # non_de_mat <- apply(example_para$mean_mat[,non_de_idx], 2, function(x){ #   avg <- (max(x)+min(x))/2 #   new_mean <- rep(avg, length(x)) #   return(new_mean) # }) # example_para$mean_mat[,non_de_idx] <- non_de_mat example_newcount <- simu_new(     sce = example_sce,     mean_mat = example_para$mean_mat,     sigma_mat = example_para$sigma_mat,     zero_mat = example_para$zero_mat,     quantile_mat = NULL,     copula_list = example_copula$copula_list,     n_cores = 1,     family_use = \"nb\",     input_data = example_data$dat,     new_covariate = example_data$newCovariate,     important_feature = rep(TRUE, dim(example_sce)[1])   ) logcounts(example_sce) <- log1p(counts(example_sce)) simu_sce <- example_sce  counts(simu_sce) <- example_newcount logcounts(simu_sce) <- log1p(counts(simu_sce)) de_genes = de_idx[1:5] loc = colData(simu_sce)[,c(\"spatial1\",\"spatial2\")] expre = lapply(de_genes, function(x){     curr = as.matrix(counts(simu_sce)[x,])     curr = log1p(curr)     return(rescale(curr))   }) long = do.call(rbind, expre) long = as.data.frame(long) colnames(long) <- \"Expression\" long$gene = do.call(c, lapply(de_genes, function(x){rep(x,dim(expre[[1]])[1])})) long$x = rep(loc[,1],5) long$y = rep(loc[,2],5) as_tibble(long, rownames = \"Cell\") %>% ggplot(aes(x = x, y = y, color = Expression)) +geom_point(size = 0.1)+facet_grid(~gene)+ scale_colour_gradientn(colors = viridis_pal(option = \"magma\")(10), limits=c(0, 1)) + coord_fixed(ratio = 1) + theme(axis.text.x = element_text(angle = 45)) non_de_genes = non_de_idx[1:5] loc = colData(simu_sce)[,c(\"spatial1\",\"spatial2\")] expre = lapply(non_de_genes, function(x){     curr = as.matrix(counts(simu_sce)[x,])     curr = log1p(curr)     return(rescale(curr))   }) long = do.call(rbind, expre) long = as.data.frame(long) colnames(long) <- \"Expression\" long$gene = do.call(c, lapply(non_de_genes, function(x){rep(x,dim(expre[[1]])[1])})) long$x = rep(loc[,1],5) long$y = rep(loc[,2],5) as_tibble(long, rownames = \"Cell\") %>% ggplot(aes(x = x, y = y, color = Expression)) +geom_point(size = 0.1)+facet_grid(~gene)+ scale_colour_gradientn(colors = viridis_pal(option = \"magma\")(10), limits=c(0, 1)) + coord_fixed(ratio = 1) + theme(axis.text.x = element_text(angle = 45))"},{"path":"/articles/scDesign3-DEanalysis-vignette.html","id":"svg-identification","dir":"Articles","previous_headings":"Identification of Spatially Variable Genes (SVG) in spatial transcriptomic data","what":"SVG identification","title":"Benchmarking DE Analysis with scDesign3","text":"Now, use simulated data benchmark performance three SVG identification methods. p-values two methods Benjamini-Hochberg(BH) correction stored qvals following code.","code":"qvals <- matrix(0, ncol = 3, nrow = dim(simu_sce)[1]) colnames(qvals) <- c(\"spatialDE\",\"SPARK\",\"SPARK-X\") rownames(qvals) <- rownames(simu_sce)"},{"path":"/articles/scDesign3-DEanalysis-vignette.html","id":"spatialde","dir":"Articles","previous_headings":"Identification of Spatially Variable Genes (SVG) in spatial transcriptomic data > SVG identification","what":"spatialDE","title":"Benchmarking DE Analysis with scDesign3","text":"follow tutorial spatialDE conduct hypothesis test obtain p-values BH correction.","code":"count <- counts(simu_sce) sample_info <- colData(simu_sce)[, c(\"spatial1\",\"spatial2\")] sample_info <- as.data.frame(sample_info) colnames(sample_info) <- c(\"x\",\"y\") count <- count[rowSums(count) >=3, ] count <- count[, row.names(sample_info)] sample_info$total_counts <- colSums(count) X <- sample_info[,c(\"x\",\"y\")] norm_expr <- stabilize(count) resid_expr <- regress_out(norm_expr, sample_info = sample_info) results_spatialDE <- spatialDE::run(resid_expr, coordinates = X) rownames(results_spatialDE) <- results_spatialDE$g qvals[,\"spatialDE\"] <- results_spatialDE[rownames(simu_sce),\"qval\"]"},{"path":"/articles/scDesign3-DEanalysis-vignette.html","id":"spark","dir":"Articles","previous_headings":"Identification of Spatially Variable Genes (SVG) in spatial transcriptomic data > SVG identification","what":"SPARK","title":"Benchmarking DE Analysis with scDesign3","text":"follow tutorial SPARK conduct hypothesis test obtain p-values BH correction.","code":"rawcount <- counts(simu_sce) info <- as.data.frame(colData(simu_sce)[, c(\"spatial1\",\"spatial2\")]) colnames(info) <- c(\"x\",\"y\") info$total_count <- apply(rawcount,2,sum) rownames(info) <- colnames(rawcount) spark <- CreateSPARKObject(counts=rawcount,                               location=info[,1:2],                              percentage = 0,                               min_total_counts = 10) spark@lib_size <- apply(spark@counts, 2, sum) spark <- spark.vc(spark,                     covariates = NULL,                     lib_size = spark@lib_size,                     num_core = 2,                    verbose = FALSE) spark <- spark.test(spark,                       check_positive = TRUE,                       verbose = FALSE) qvals[,\"SPARK\"] <- spark@res_mtest$adjusted_pvalue"},{"path":"/articles/scDesign3-DEanalysis-vignette.html","id":"spark-x","dir":"Articles","previous_headings":"Identification of Spatially Variable Genes (SVG) in spatial transcriptomic data > SVG identification","what":"SPARK-X","title":"Benchmarking DE Analysis with scDesign3","text":"follow tutorial SPARK-X conduct hypothesis test obtain p-values BH correction. Since manually created non-SVG extra_para() step, now can calculate actual false discovery proportion(FDP) power tests conducted various target FDR threshold. Lastly, visualize Target FDR vs Actual FDP Target FDR vs Power .","code":"sp_count <- counts(simu_sce) info <- as.data.frame(colData(simu_sce)[, c(\"spatial1\",\"spatial2\")]) colnames(info) <- c(\"x\",\"y\") info$total_count <- apply(sp_count ,2,sum) rownames(info) <- colnames(sp_count ) location <- as.matrix(info) mt_idx      <- grep(\"mt-\",rownames(sp_count)) if(length(mt_idx)!=0){     sp_count    <- sp_count[-mt_idx,] } sparkX <- sparkx(sp_count,location,numCores=1,option=\"mixture\") head(sparkX$res_mtest) qvals[,\"SPARK-X\"] <-sparkX$res_mtest$adjustedPval test = colnames(qvals) targetFDR <- c(0.01,0.05,0.1,0.2,0.5) de <- de_idx fdp_mat <- matrix(0, nrow = length(targetFDR), ncol = length(test)) colnames(fdp_mat) <- test rownames(fdp_mat) <- targetFDR power_mat <- matrix(0, nrow = length(targetFDR), ncol = length(test)) colnames(power_mat) <- test rownames(power_mat) <- targetFDR  for (t in 1:length(test)) {   curr_p <- qvals[,t]   curr_test <- test[t]   for (i in 1:length(targetFDR)) {     thre <- targetFDR[i]     if(curr_test == \"spatialDE\"){       de_results <- results_spatialDE[results_spatialDE$qval < thre, ]       ms_results <- model_search(       resid_expr,       coordinates = X,       de_results = de_results       )       discovery <- ms_results$g       tp <- length(intersect(ms_results$g,de))     }else{       discovery <- which(curr_p <= thre)       tp <- length(intersect(names(discovery),de))     }     if(length(discovery) == 0){       fdp <- 0     }else{       fdp <- (length(discovery) - tp)/length(discovery)     }     power <- tp/length(de)     fdp_mat[i, t] <- fdp     power_mat[i,t] <- power   } } fdp_long <- melt(fdp_mat) colnames(fdp_long) <- c(\"Target FDR\",\"test_method\",\"Actual FDP\") fdp_plot <- ggplot(fdp_long) +   geom_line(aes(x=`Target FDR`, y=`Actual FDP`,color=test_method))+   geom_point(aes(x=`Target FDR`, y=`Actual FDP`,color=test_method))+   geom_abline(intercept = 0, slope=1,linetype=\"dashed\",color=\"grey\")+   theme(aspect.ratio = 1) + expand_limits(x = 0, y = c(0,1)) fdp_plot power_long <- melt(power_mat) colnames(power_long) <- c(\"Target FDR\",\"test_method\",\"Power\") power_plot <- ggplot(power_long) +   geom_line(aes(x=`Target FDR`, y=Power,color=test_method))+   geom_point(aes(x=`Target FDR`, y=Power,color=test_method))+   theme(aspect.ratio = 1) power_plot"},{"path":"/articles/scDesign3-DEanalysis-vignette.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Benchmarking DE Analysis with scDesign3","text":"","code":"sessionInfo() #> R version 4.2.2 Patched (2022-11-10 r83330) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] parallel  stats4    stats     graphics  grDevices utils     datasets  #> [8] methods   base      #>  #> other attached packages: #>  [1] tidyr_1.2.1                 scales_1.2.1                #>  [3] SPARK_1.1.1                 spatialDE_1.5.1             #>  [5] reshape2_1.4.4              tradeSeq_1.10.0             #>  [7] dplyr_1.0.10                PseudotimeDE_1.0.0          #>  [9] NBAMSeq_1.12.0              BiocParallel_1.32.5         #> [11] DESeq2_1.36.0               monocle3_1.3.1              #> [13] scran_1.24.1                scuttle_1.8.3               #> [15] SeuratObject_4.1.3          Seurat_4.3.0                #> [17] DuoClustering2018_1.14.0    ggplot2_3.4.0               #> [19] SingleCellExperiment_1.20.0 SummarizedExperiment_1.28.0 #> [21] Biobase_2.58.0              GenomicRanges_1.50.2        #> [23] GenomeInfoDb_1.34.6         IRanges_2.32.0              #> [25] S4Vectors_0.36.1            BiocGenerics_0.44.0         #> [27] MatrixGenerics_1.10.0       matrixStats_0.63.0          #> [29] scDesign3_0.99.1            BiocStyle_2.24.0            #>  #> loaded via a namespace (and not attached): #>   [1] rsvd_1.0.5                    ica_1.0-3                     #>   [3] foreach_1.5.2                 lmtest_0.9-40                 #>   [5] rprojroot_2.0.3               crayon_1.5.2                  #>   [7] MASS_7.3-58.2                 rhdf5filters_1.10.0           #>   [9] MAST_1.22.0                   nlme_3.1-162                  #>  [11] backports_1.4.1               basilisk_1.10.2               #>  [13] rlang_1.0.6                   XVector_0.38.0                #>  [15] ROCR_1.0-11                   irlba_2.3.5.1                 #>  [17] nloptr_2.0.3                  limma_3.54.0                  #>  [19] filelock_1.0.2                rjson_0.2.21                  #>  [21] bit64_4.0.5                   glue_1.6.2                    #>  [23] sctransform_0.3.5             spatstat.sparse_3.0-0         #>  [25] AnnotationDbi_1.58.0          speedglm_0.3-4                #>  [27] spatstat.geom_3.0-3           tidyselect_1.2.0              #>  [29] fitdistrplus_1.1-8            XML_3.99-0.13                 #>  [31] zoo_1.8-11                    xtable_1.8-4                  #>  [33] magrittr_2.0.3                evaluate_0.19                 #>  [35] cli_3.6.0                     zlibbioc_1.44.0               #>  [37] miniUI_0.1.1.1                sp_1.5-1                      #>  [39] bslib_0.4.2                   shiny_1.7.4                   #>  [41] BiocSingular_1.12.0           xfun_0.36                     #>  [43] cluster_2.1.4                 KEGGREST_1.36.3               #>  [45] tibble_3.1.8                  interactiveDisplayBase_1.34.0 #>  [47] ggrepel_0.9.2                 listenv_0.9.0                 #>  [49] Biostrings_2.64.1             png_0.1-8                     #>  [51] future_1.30.0                 withr_2.5.0                   #>  [53] bitops_1.0-7                  plyr_1.8.8                    #>  [55] pracma_2.4.2                  dqrng_0.3.0                   #>  [57] pillar_1.8.1                  cachem_1.0.6                  #>  [59] fs_1.5.2                      kernlab_0.9-31                #>  [61] DelayedMatrixStats_1.20.0     gamlss.data_6.0-2             #>  [63] vctrs_0.5.1                   ellipsis_0.3.2                #>  [65] generics_0.1.3                tools_4.2.2                   #>  [67] munsell_0.5.0                 DelayedArray_0.24.0           #>  [69] fastmap_1.1.0                 compiler_4.2.2                #>  [71] abind_1.4-5                   httpuv_1.6.8                  #>  [73] segmented_1.6-2               ExperimentHub_2.4.0           #>  [75] plotly_4.10.1                 GenomeInfoDbData_1.2.9        #>  [77] gridExtra_2.3                 edgeR_3.40.1                  #>  [79] lattice_0.20-45               dir.expiry_1.6.0              #>  [81] deldir_1.0-6                  utf8_1.2.2                    #>  [83] later_1.3.0                   BiocFileCache_2.6.0           #>  [85] jsonlite_1.8.4                princurve_2.1.6               #>  [87] ScaledMatrix_1.4.1            pbapply_1.7-0                 #>  [89] sparseMatrixStats_1.10.0      genefilter_1.78.0             #>  [91] lazyeval_0.2.2                promises_1.2.0.1              #>  [93] doParallel_1.0.17             R.utils_2.12.2                #>  [95] goftest_1.2-3                 spatstat.utils_3.0-1          #>  [97] reticulate_1.27               checkmate_2.1.0               #>  [99] rmarkdown_2.19                pkgdown_2.0.7                 #> [101] cowplot_1.1.1                 qgam_1.3.4                    #> [103] textshaping_0.3.6             statmod_1.5.0                 #> [105] Rtsne_0.16                    uwot_0.1.14                   #> [107] igraph_1.3.5                  HDF5Array_1.26.0              #> [109] survival_3.5-3                yaml_2.3.6                    #> [111] systemfonts_1.0.4             htmltools_0.5.4               #> [113] memoise_2.0.1                 locfit_1.5-9.7                #> [115] here_1.0.1                    viridisLite_0.4.1             #> [117] digest_0.6.31                 assertthat_0.2.1              #> [119] mime_0.12                     rappdirs_0.3.3                #> [121] RSQLite_2.2.20                future.apply_1.10.0           #> [123] data.table_1.14.6             blob_1.2.3                    #> [125] R.oo_1.25.0                   ragg_1.2.5                    #> [127] splines_4.2.2                 labeling_0.4.2                #> [129] Rhdf5lib_1.20.0               AnnotationHub_3.4.0           #> [131] mixtools_2.0.0                RCurl_1.98-1.9                #> [133] hms_1.1.2                     rhdf5_2.42.0                  #> [135] colorspace_2.0-3              DropletUtils_1.18.1           #> [137] BiocManager_1.30.19           matlab_1.0.4                  #> [139] sass_0.4.4                    Rcpp_1.0.9                    #> [141] mclust_6.0.0                  bookdown_0.31                 #> [143] RANN_2.6.1                    mvtnorm_1.1-3                 #> [145] fansi_1.0.3                   parallelly_1.34.0             #> [147] R6_2.5.1                      grid_4.2.2                    #> [149] ggridges_0.5.4                lifecycle_1.0.3               #> [151] bluster_1.6.0                 curl_5.0.0                    #> [153] minqa_1.2.5                   leiden_0.4.3                  #> [155] jquerylib_0.1.4               SpatialExperiment_1.8.0       #> [157] Matrix_1.5-1                  desc_1.4.2                    #> [159] RcppAnnoy_0.0.20              RColorBrewer_1.1-3            #> [161] iterators_1.0.14              spatstat.explore_3.0-5        #> [163] stringr_1.5.0                 htmlwidgets_1.6.1             #> [165] beachmat_2.14.0               polyclip_1.10-4               #> [167] purrr_1.0.1                   gamlss_5.4-10                 #> [169] terra_1.6-47                  mgcv_1.8-41                   #> [171] globals_0.16.2                patchwork_1.1.2               #> [173] spatstat.random_3.0-1         slingshot_2.4.0               #> [175] progressr_0.13.0              codetools_0.2-19              #> [177] metapod_1.4.0                 prettyunits_1.1.1             #> [179] dbplyr_2.2.1                  basilisk.utils_1.10.0         #> [181] R.methodsS3_1.8.2             gtable_0.3.1                  #> [183] DBI_1.1.3                     tensor_1.5                    #> [185] httr_1.4.4                    highr_0.10                    #> [187] KernSmooth_2.23-20            stringi_1.7.12                #> [189] progress_1.2.2                farver_2.1.1                  #> [191] annotate_1.74.0               viridis_0.6.2                 #> [193] ggthemes_4.2.4                magick_2.7.3                  #> [195] boot_1.3-28                   BiocNeighbors_1.14.0          #> [197] lme4_1.1-31                   geneplotter_1.74.0            #> [199] CompQuadForm_1.4.3            scattermore_0.8               #> [201] BiocVersion_3.15.2            bit_4.0.5                     #> [203] spatstat.data_3.0-0           pkgconfig_2.0.3               #> [205] TrajectoryUtils_1.4.0         gamlss.dist_6.0-5             #> [207] knitr_1.41"},{"path":"/articles/scDesign3-batchEffect-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulate datasets with batch effect","text":"tutorial, show use scDesign3 simulate data original batch effects remove batch effects. also demostrate add ariticial batch effects.","code":""},{"path":"/articles/scDesign3-batchEffect-vignette.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"Simulate datasets with batch effect","text":"raw data SeuratData package. data called pbmcsca package; PBMC Systematic Comparative Analysis dataset Broad Institute. save computational time, use top 100 genes. column batch example dataset’s colData contains batch information.","code":"example_sce <- readRDS((url(\"https://www.dropbox.com/sh/0tptrft7hsstpi3/AACFsTJvmzgBKicMsbFzxbyUa/BATCH_sce.rds?raw=1\"))) print(example_sce) #> class: SingleCellExperiment  #> dim: 1000 6276  #> metadata(0): #> assays(2): counts logcounts #> rownames(1000): LYZ GNLY ... PBXIP1 SECTM1 #> rowData names(0): #> colnames(6276): pbmc2_10X_V2_AAACCTGAGATGGGTC #>   pbmc2_10X_V2_AAACCTGAGCGTAATA ... pbmc1_10x_v3_TTGAACGCATGCAGCC #>   pbmc1_10x_v3_TTTGACTAGTGTTCCA #> colData names(13): phenoid orig.ident ... batch cell_type #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): example_sce <- example_sce[1:100, ] head(colData(example_sce)) #> DataFrame with 6 rows and 13 columns #>                                        phenoid orig.ident nCount_RNA #>                                    <character>   <factor>  <numeric> #> pbmc2_10X_V2_AAACCTGAGATGGGTC           B cell      pbmc2       2360 #> pbmc2_10X_V2_AAACCTGAGCGTAATA           B cell      pbmc2       1888 #> pbmc2_10X_V2_AAACCTGAGCTAGGCA Cytotoxic T cell      pbmc2       3456 #> pbmc2_10X_V2_AAACCTGAGGGTCTCC   Dendritic cell      pbmc2       3802 #> pbmc2_10X_V2_AAACCTGGTCCGAACC      CD4+ T cell      pbmc2       3826 #> pbmc2_10X_V2_AAACCTGTCGTCCGTT      CD4+ T cell      pbmc2       2345 #>                               nFeature_RNA       nGene        nUMI #>                                  <integer> <character> <character> #> pbmc2_10X_V2_AAACCTGAGATGGGTC         1044        1044        2360 #> pbmc2_10X_V2_AAACCTGAGCGTAATA          803         803        1888 #> pbmc2_10X_V2_AAACCTGAGCTAGGCA         1372        1372        3456 #> pbmc2_10X_V2_AAACCTGAGGGTCTCC         1519        1519        3802 #> pbmc2_10X_V2_AAACCTGGTCCGAACC         1451        1451        3826 #> pbmc2_10X_V2_AAACCTGTCGTCCGTT          931         931        2345 #>                                     percent.mito     Cluster  Experiment #>                                      <character> <character> <character> #> pbmc2_10X_V2_AAACCTGAGATGGGTC 0.0419491525423729           2       pbmc2 #> pbmc2_10X_V2_AAACCTGAGCGTAATA 0.0413135593220339           2       pbmc2 #> pbmc2_10X_V2_AAACCTGAGCTAGGCA 0.0353009259259259           1       pbmc2 #> pbmc2_10X_V2_AAACCTGAGGGTCTCC 0.0420831141504471           6       pbmc2 #> pbmc2_10X_V2_AAACCTGGTCCGAACC 0.0371144798745426           0       pbmc2 #> pbmc2_10X_V2_AAACCTGTCGTCCGTT 0.0652452025586354           0       pbmc2 #>                                          Method    ident             batch #>                                     <character> <factor>       <character> #> pbmc2_10X_V2_AAACCTGAGATGGGTC 10x Chromium (v2)    pbmc2 10x Chromium (v2) #> pbmc2_10X_V2_AAACCTGAGCGTAATA 10x Chromium (v2)    pbmc2 10x Chromium (v2) #> pbmc2_10X_V2_AAACCTGAGCTAGGCA 10x Chromium (v2)    pbmc2 10x Chromium (v2) #> pbmc2_10X_V2_AAACCTGAGGGTCTCC 10x Chromium (v2)    pbmc2 10x Chromium (v2) #> pbmc2_10X_V2_AAACCTGGTCCGAACC 10x Chromium (v2)    pbmc2 10x Chromium (v2) #> pbmc2_10X_V2_AAACCTGTCGTCCGTT 10x Chromium (v2)    pbmc2 10x Chromium (v2) #>                                      cell_type #>                                    <character> #> pbmc2_10X_V2_AAACCTGAGATGGGTC           B cell #> pbmc2_10X_V2_AAACCTGAGCGTAATA           B cell #> pbmc2_10X_V2_AAACCTGAGCTAGGCA Cytotoxic T cell #> pbmc2_10X_V2_AAACCTGAGGGTCTCC   Dendritic cell #> pbmc2_10X_V2_AAACCTGGTCCGAACC      CD4+ T cell #> pbmc2_10X_V2_AAACCTGTCGTCCGTT      CD4+ T cell"},{"path":"/articles/scDesign3-batchEffect-vignette.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Simulate datasets with batch effect","text":"can simulate new data batch effect information. can also remove batch effect generate new data. , remove batch effect setting coefficient zero genes’ marginal fits. , use new sets coefficients generate parameters genes across cells. Additionally, can alter batch effect information mannually change estimated coefficient batch effect gene’s marginal model. , can simulate new dataset altered batch effect information. create three SingleCellExperiment objects using three count matrices generated store logcounts.","code":"set.seed(123) simu_res <- scdesign3(sce = example_sce,                                assay_use = \"counts\",                                celltype = \"cell_type\",                                pseudotime = NULL,                                spatial = NULL,                                other_covariates = c(\"batch\"),                                mu_formula = \"cell_type + batch\",                                sigma_formula = \"1\",                                family_use = \"nb\",                                n_cores = 2,                                usebam = FALSE,                                corr_formula = \"1\",                                copula = \"gaussian\",                                DT = TRUE,                                pseudo_obs = FALSE,                                return_model = FALSE) BATCH_data <- construct_data(   sce = example_sce,   assay_use = \"counts\",   celltype = \"cell_type\",   pseudotime = NULL,   spatial = NULL,   other_covariates = c(\"batch\"),   corr_by = \"1\" ) BATCH_marginal <- fit_marginal(   data = BATCH_data,   predictor = \"gene\",   mu_formula = \"cell_type + batch\",   sigma_formula = \"1\",   family_use = \"nb\",   n_cores = 2,   usebam = FALSE ) BATCH_copula <- fit_copula(     sce = example_sce,     assay_use = \"counts\",     marginal_list = BATCH_marginal,     family_use = \"nb\",     copula = \"gaussian\",     n_cores = 2,     new_covariate = NULL,     input_data = BATCH_data$dat   ) BATCH_marginal_null <- lapply(BATCH_marginal, function(x) {   x$coefficients[length(x$coefficients)] <- 0   x }) BATCH_para_null <- extract_para(     sce = example_sce,     marginal_list = BATCH_marginal_null,     n_cores = 2,     family_use = \"nb\",     new_covariate = NULL   ) BATCH_newcount_null <- simu_new(     sce = example_sce,     mean_mat = BATCH_para_null$mean_mat,     sigma_mat = BATCH_para_null$sigma_mat,     zero_mat = BATCH_para_null$zero_mat,     quantile_mat = NULL,     copula_list = BATCH_copula$copula_list,     n_cores = 2,     family_use = \"nb\",     input_data = BATCH_data$dat,     new_covariate = BATCH_data$newCovariate,     important_feature = BATCH_copula$important_feature   ) BATCH_marginal_alter <- lapply(BATCH_marginal, function(x) {   x$coefficients[length(x$coefficients)] <- rnorm(1, mean = 5, sd = 2)   x }) BATCH_para_alter <- extract_para(     sce = example_sce,     marginal_list = BATCH_marginal_alter,     n_cores = 2,     family_use = \"nb\",     new_covariate = NULL   ) BATCH_newcount_alter <- simu_new(     sce = example_sce,     mean_mat = BATCH_para_alter$mean_mat,     sigma_mat = BATCH_para_alter$sigma_mat,     zero_mat = BATCH_para_alter$zero_mat,     quantile_mat = NULL,     copula_list = BATCH_copula$copula_list,     n_cores = 2,     family_use = \"nb\",     input_data = BATCH_data$dat,     new_covariate = BATCH_data$newCovariate,     important_feature = BATCH_copula$important_feature   ) simu_res_list <- lapply(list(simu_res$new_count, BATCH_newcount_null, BATCH_newcount_alter), function(x){   simu_sce <- example_sce   counts(simu_sce) <- x   logcounts(simu_sce) <- log1p(counts(simu_sce))   return(simu_sce) })"},{"path":"/articles/scDesign3-batchEffect-vignette.html","id":"visulization","dir":"Articles","previous_headings":"","what":"Visulization","title":"Simulate datasets with batch effect","text":"","code":"compare_figure <- plot_reduceddim(ref_sce = example_sce,                                    sce_list = simu_res_list,                                    name_vec = c(\"Reference\", \"w/ Batch\", \"w/o Batch\",\"Aritifical Batch\"),                                   assay_use = \"logcounts\",                                    if_plot = TRUE,                                    color_by = \"cell_type\",                                    shape_by = \"batch\",                                   n_pc = 20) plot(compare_figure$p_umap)"},{"path":"/articles/scDesign3-batchEffect-vignette.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Simulate datasets with batch effect","text":"","code":"sessionInfo() #> R version 4.2.2 Patched (2022-11-10 r83330) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] SingleCellExperiment_1.20.0 SummarizedExperiment_1.28.0 #>  [3] Biobase_2.58.0              GenomicRanges_1.50.2        #>  [5] GenomeInfoDb_1.34.6         IRanges_2.32.0              #>  [7] S4Vectors_0.36.1            BiocGenerics_0.44.0         #>  [9] MatrixGenerics_1.10.0       matrixStats_0.63.0          #> [11] ggplot2_3.4.0               scDesign3_0.99.1            #> [13] BiocStyle_2.24.0            #>  #> loaded via a namespace (and not attached): #>  [1] nlme_3.1-162           bitops_1.0-7           fs_1.5.2               #>  [4] rprojroot_2.0.3        tools_4.2.2            bslib_0.4.2            #>  [7] utf8_1.2.2             R6_2.5.1               irlba_2.3.5.1          #> [10] DBI_1.1.3              mgcv_1.8-41            colorspace_2.0-3       #> [13] withr_2.5.0            tidyselect_1.2.0       compiler_4.2.2         #> [16] textshaping_0.3.6      cli_3.6.0              desc_1.4.2             #> [19] DelayedArray_0.24.0    labeling_0.4.2         bookdown_0.31          #> [22] sass_0.4.4             scales_1.2.1           mvtnorm_1.1-3          #> [25] gamlss_5.4-10          askpass_1.1            pkgdown_2.0.7          #> [28] systemfonts_1.0.4      stringr_1.5.0          digest_0.6.31          #> [31] rmarkdown_2.19         XVector_0.38.0         pkgconfig_2.0.3        #> [34] htmltools_0.5.4        umap_0.2.9.0           highr_0.10             #> [37] fastmap_1.1.0          rlang_1.0.6            jquerylib_0.1.4        #> [40] generics_0.1.3         farver_2.1.1           gamlss.data_6.0-2      #> [43] jsonlite_1.8.4         mclust_6.0.0           dplyr_1.0.10           #> [46] RCurl_1.98-1.9         magrittr_2.0.3         GenomeInfoDbData_1.2.9 #> [49] Matrix_1.5-1           Rcpp_1.0.9             munsell_0.5.0          #> [52] fansi_1.0.3            reticulate_1.27        lifecycle_1.0.3        #> [55] stringi_1.7.12         yaml_2.3.6             MASS_7.3-58.2          #> [58] zlibbioc_1.44.0        gamlss.dist_6.0-5      grid_4.2.2             #> [61] parallel_4.2.2         lattice_0.20-45        splines_4.2.2          #> [64] knitr_1.41             pillar_1.8.1           glue_1.6.2             #> [67] evaluate_0.19          BiocManager_1.30.19    vctrs_0.5.1            #> [70] png_0.1-8              gtable_0.3.1           openssl_2.0.5          #> [73] purrr_1.0.1            assertthat_0.2.1       cachem_1.0.6           #> [76] xfun_0.36              RSpectra_0.16-1        ragg_1.2.5             #> [79] survival_3.5-3         tibble_3.1.8           memoise_2.0.1"},{"path":"/articles/scDesign3-clusterGOF-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Evaluate clustering goodness-of-fit by scDesign3","text":"tutorial, show use scDesign3 evaluate clustering goodness--fit different cell-type assignments. true labels unavailable little prior knowledge, scDesign3 BIC can serve unsupervised metric.","code":""},{"path":"/articles/scDesign3-clusterGOF-vignette.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"Evaluate clustering goodness-of-fit by scDesign3","text":"raw data R package DuoClustering2018 contain set datasets various clustering results. demonstration purpose, use Zhengmix4eq dataset package top 100 highly variable genes corresponding k-means clustering results k = \\(2 ,\\cdots, 10\\).","code":"Zhengmix4eq_sce <- get(\"sce_filteredExpr10_Zhengmix4eq\")(metadata = FALSE) res <- get(\"clustering_summary_filteredExpr10_Zhengmix4eq_v1\")(metadata = FALSE)    res_sub <- res %>% dplyr::filter(method %in% c(\"SC3\", \"Seurat\", \"PCAHC\", \"PCAKmeans\", \"CIDR\") & run == 1) res_sub_list <- res_sub %>% group_by(dataset, method, run, k, resolution) %>% group_split() kmeans_res <- Filter(function(x){all(x$method == \"PCAKmeans\")}, res_sub_list) ncell <- ncol(Zhengmix4eq_sce) ngene <- 100    chosen <- getTopHVGs(Zhengmix4eq_sce, n = ngene) sce <- Zhengmix4eq_sce[chosen, ] ntrain <- round(ncell/2)    set.seed(123) train_index <- sample(seq_len(ncell), ntrain, replace = FALSE) train_sce <- sce[, train_index]"},{"path":"/articles/scDesign3-clusterGOF-vignette.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Evaluate clustering goodness-of-fit by scDesign3","text":"use different cell-type clustering information simulate new data.","code":"scDesign3_result <- lapply(kmeans_res, function(x) {       dat <- x %>% dplyr::select(c(\"cell\", \"cluster\")) %>% data.frame()       rownames(dat) <- dat$cell       colData(train_sce)$cell_type <- factor(dat[colnames(train_sce), ]$cluster)       simu_sce <- scdesign3(sce = train_sce,                              celltype = 'cell_type',                              pseudotime = NULL,                              spatial = NULL,                              other_covariates = NULL,                              corr_formula = \"1\",                              mu_formula = \"cell_type\",                              sigma_formula = \"cell_type\",                              n_cores = 2,                              copula = \"gaussian\",                              assay_use = \"counts\",                              family_use = \"nb\")              simu_sce     })"},{"path":"/articles/scDesign3-clusterGOF-vignette.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Evaluate clustering goodness-of-fit by scDesign3","text":"simulations, can check BIC provided package calculated ARI evaluate k-means clustering qualities.","code":"bic_list <- lapply(scDesign3_result, function(x){return(x$model_bic)}) kmeans_ari <- sapply(kmeans_res, function(x){ARI(x$cluster, x$trueclass)}) bic_df <- data.frame(matrix(unlist(bic_list), nrow = length(bic_list), byrow = TRUE)) colnames(bic_df) <- names(bic_list[[1]]) rownames(bic_df) <- paste0(\"k = \", 2:10) metric <- tibble(ari = kmeans_ari, bic = bic_df$bic.marginal, Method = paste0(\"k = \", 2:10)) p_cluster_metric <- metric %>% ggplot(aes(x =ari, y = bic,label = Method)) + geom_point() + theme_bw() + theme(aspect.ratio = 1,     panel.grid.minor = element_blank(),     panel.grid.major = element_blank()) + ggpubr::stat_cor(method = \"spearman\", cor.coef.name = \"rho\", label.x.npc = \"left\", label.y.npc = 0.5) + ylab(\"scDesign3 BIC\") + xlab(\"ARI\") p_cluster_metric"},{"path":"/articles/scDesign3-clusterGOF-vignette.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Evaluate clustering goodness-of-fit by scDesign3","text":"","code":"sessionInfo() #> R version 4.2.2 Patched (2022-11-10 r83330) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] ggplot2_3.4.0               aricode_1.0.2               #>  [3] scran_1.24.1                scuttle_1.8.3               #>  [5] SingleCellExperiment_1.20.0 SummarizedExperiment_1.28.0 #>  [7] Biobase_2.58.0              GenomicRanges_1.50.2        #>  [9] GenomeInfoDb_1.34.6         IRanges_2.32.0              #> [11] S4Vectors_0.36.1            BiocGenerics_0.44.0         #> [13] MatrixGenerics_1.10.0       matrixStats_0.63.0          #> [15] dplyr_1.0.10                DuoClustering2018_1.14.0    #> [17] scDesign3_0.99.1            BiocStyle_2.24.0            #>  #> loaded via a namespace (and not attached): #>   [1] backports_1.4.1               AnnotationHub_3.4.0           #>   [3] BiocFileCache_2.6.0           systemfonts_1.0.4             #>   [5] plyr_1.8.8                    igraph_1.3.5                  #>   [7] splines_4.2.2                 gamlss_5.4-10                 #>   [9] BiocParallel_1.32.5           digest_0.6.31                 #>  [11] htmltools_0.5.4               viridis_0.6.2                 #>  [13] fansi_1.0.3                   magrittr_2.0.3                #>  [15] memoise_2.0.1                 ScaledMatrix_1.4.1            #>  [17] cluster_2.1.4                 limma_3.54.0                  #>  [19] Biostrings_2.64.1             pkgdown_2.0.7                 #>  [21] colorspace_2.0-3              blob_1.2.3                    #>  [23] rappdirs_0.3.3                gamlss.data_6.0-2             #>  [25] textshaping_0.3.6             xfun_0.36                     #>  [27] crayon_1.5.2                  RCurl_1.98-1.9                #>  [29] jsonlite_1.8.4                survival_3.5-3                #>  [31] glue_1.6.2                    gtable_0.3.1                  #>  [33] zlibbioc_1.44.0               XVector_0.38.0                #>  [35] DelayedArray_0.24.0           car_3.1-1                     #>  [37] BiocSingular_1.12.0           abind_1.4-5                   #>  [39] scales_1.2.1                  mvtnorm_1.1-3                 #>  [41] DBI_1.1.3                     edgeR_3.40.1                  #>  [43] rstatix_0.7.1                 ggthemes_4.2.4                #>  [45] Rcpp_1.0.9                    viridisLite_0.4.1             #>  [47] xtable_1.8-4                  dqrng_0.3.0                   #>  [49] bit_4.0.5                     rsvd_1.0.5                    #>  [51] mclust_6.0.0                  metapod_1.4.0                 #>  [53] httr_1.4.4                    ellipsis_0.3.2                #>  [55] farver_2.1.1                  pkgconfig_2.0.3               #>  [57] sass_0.4.4                    dbplyr_2.2.1                  #>  [59] locfit_1.5-9.7                utf8_1.2.2                    #>  [61] labeling_0.4.2                tidyselect_1.2.0              #>  [63] rlang_1.0.6                   reshape2_1.4.4                #>  [65] later_1.3.0                   AnnotationDbi_1.58.0          #>  [67] munsell_0.5.0                 BiocVersion_3.15.2            #>  [69] tools_4.2.2                   cachem_1.0.6                  #>  [71] cli_3.6.0                     generics_0.1.3                #>  [73] RSQLite_2.2.20                ExperimentHub_2.4.0           #>  [75] broom_1.0.2                   evaluate_0.19                 #>  [77] stringr_1.5.0                 fastmap_1.1.0                 #>  [79] yaml_2.3.6                    ragg_1.2.5                    #>  [81] knitr_1.41                    bit64_4.0.5                   #>  [83] fs_1.5.2                      purrr_1.0.1                   #>  [85] KEGGREST_1.36.3               nlme_3.1-162                  #>  [87] sparseMatrixStats_1.10.0      mime_0.12                     #>  [89] compiler_4.2.2                filelock_1.0.2                #>  [91] curl_5.0.0                    png_0.1-8                     #>  [93] interactiveDisplayBase_1.34.0 ggsignif_0.6.4                #>  [95] tibble_3.1.8                  statmod_1.5.0                 #>  [97] bslib_0.4.2                   stringi_1.7.12                #>  [99] highr_0.10                    desc_1.4.2                    #> [101] lattice_0.20-45               bluster_1.6.0                 #> [103] Matrix_1.5-1                  vctrs_0.5.1                   #> [105] pillar_1.8.1                  lifecycle_1.0.3               #> [107] BiocManager_1.30.19           jquerylib_0.1.4               #> [109] BiocNeighbors_1.14.0          bitops_1.0-7                  #> [111] irlba_2.3.5.1                 httpuv_1.6.8                  #> [113] R6_2.5.1                      bookdown_0.31                 #> [115] promises_1.2.0.1              gridExtra_2.3                 #> [117] codetools_0.2-19              MASS_7.3-58.2                 #> [119] assertthat_0.2.1              rprojroot_2.0.3               #> [121] withr_2.5.0                   GenomeInfoDbData_1.2.9        #> [123] mgcv_1.8-41                   parallel_4.2.2                #> [125] grid_4.2.2                    beachmat_2.14.0               #> [127] tidyr_1.2.1                   rmarkdown_2.19                #> [129] DelayedMatrixStats_1.20.0     carData_3.0-5                 #> [131] ggpubr_0.5.0                  shiny_1.7.4                   #> [133] gamlss.dist_6.0-5"},{"path":"/articles/scDesign3-conditionEffect-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulate datasets with condition effect","text":"tutorial, show use scDesign3 simulate data condition effects adjust condition effects.","code":""},{"path":"/articles/scDesign3-conditionEffect-vignette.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"Simulate datasets with condition effect","text":"raw data SeuratData package. data called ifnb package; PBMC data simulated controlled IFNB. save computational time, use top 100 genes two cell types (CD14 Mono B). condition information stored colData example dataset.","code":"example_sce <- readRDS((url(\"https://www.dropbox.com/sh/0tptrft7hsstpi3/AABoozvjRadAygeSSJFoc2OOa/IFNB_sce.rds?raw=1\"))) print(example_sce) #> class: SingleCellExperiment  #> dim: 1000 13999  #> metadata(0): #> assays(2): counts logcounts #> rownames(1000): FTL HBB ... AC022182.3 SCIN #> rowData names(0): #> colnames(13999): AAACATACATTTCC.1 AAACATACCAGAAA.1 ... TTTGCATGCTAAGC.1 #>   TTTGCATGGGACGA.1 #> colData names(8): orig.ident nCount_RNA ... cell_type condition #> reducedDimNames(0): #> mainExpName: RNA #> altExpNames(0): print(table(colData(example_sce)$cell_type)) #>  #>    CD14 Mono  CD4 Naive T CD4 Memory T    CD16 Mono            B        CD8 T  #>         4362         2504         1762         1044          978          814  #>  T activated           NK           DC  B Activated           Mk          pDC  #>          633          619          472          388          236          132  #>        Eryth  #>           55 example_sce <- example_sce[1:100, colData(example_sce)$cell_type %in% c(\"CD14 Mono\", \"B\")]  ## Remove unused cell type levels colData(example_sce)$cell_type <- droplevels(colData(example_sce)$cell_type) head(colData(example_sce)) #> DataFrame with 6 rows and 8 columns #>                   orig.ident nCount_RNA nFeature_RNA        stim #>                  <character>  <numeric>    <integer> <character> #> AAACATACATTTCC.1 IMMUNE_CTRL       3017          877        CTRL #> AAACATACCAGAAA.1 IMMUNE_CTRL       2481          713        CTRL #> AAACATACCTCGCT.1 IMMUNE_CTRL       3420          850        CTRL #> AAACATACGGCATT.1 IMMUNE_CTRL       1581          557        CTRL #> AAACATTGCTTCGC.1 IMMUNE_CTRL       2536          669        CTRL #> AAACGCACTCGCCT.1 IMMUNE_CTRL       3563          908        CTRL #>                  seurat_annotations       ident cell_type   condition #>                            <factor>    <factor>  <factor> <character> #> AAACATACATTTCC.1          CD14 Mono IMMUNE_CTRL CD14 Mono        CTRL #> AAACATACCAGAAA.1          CD14 Mono IMMUNE_CTRL CD14 Mono        CTRL #> AAACATACCTCGCT.1          CD14 Mono IMMUNE_CTRL CD14 Mono        CTRL #> AAACATACGGCATT.1          CD14 Mono IMMUNE_CTRL CD14 Mono        CTRL #> AAACATTGCTTCGC.1          CD14 Mono IMMUNE_CTRL CD14 Mono        CTRL #> AAACGCACTCGCCT.1          CD14 Mono IMMUNE_CTRL CD14 Mono        CTRL"},{"path":"/articles/scDesign3-conditionEffect-vignette.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Simulate datasets with condition effect","text":"First, simulate new data condition effects. , can also simulate new dataset condition effects B cells removed. , condition effects B cells removed genes modifying estimated coefficients genes’ marginal models. , can generate parameters using altered marginal fits simulate new data altered paremeters. , can create SinglecellExperiment object using synthetic count matrix store logcounts input synthetic SinglecellExperiment objects.","code":"set.seed(123) simu_res <- scdesign3(     sce = example_sce,     assay_use = \"counts\",     celltype = \"cell_type\",     pseudotime = NULL,     spatial = NULL,     other_covariates = c(\"condition\"),     mu_formula = \"cell_type + condition + cell_type*condition\",     sigma_formula = \"1\",     family_use = \"nb\",     n_cores = 2,     usebam = FALSE,     corr_formula = \"cell_type\",     copula = \"gaussian\",     DT = TRUE,     pseudo_obs = FALSE,     return_model = FALSE,     nonzerovar = FALSE   ) IFNB_data <- construct_data(   sce = example_sce,   assay_use = \"counts\",   celltype = \"cell_type\",   pseudotime = NULL,   spatial = NULL,   other_covariates = c(\"condition\"),   corr_by = \"cell_type\" ) IFNB_marginal <- fit_marginal(   data = IFNB_data,   predictor = \"gene\",   mu_formula = \"cell_type + condition + cell_type*condition\",   sigma_formula = \"1\",   family_use = \"nb\",   n_cores = 2,   usebam = FALSE ) IFNB_copula <- fit_copula(     sce = example_sce,     assay_use = \"counts\",     marginal_list = IFNB_marginal,     family_use = \"nb\",     copula = \"gaussian\",     n_cores = 2,     new_covariate = NULL,     input_data = IFNB_data$dat   ) IFNB_marginal_null_B <- lapply(IFNB_marginal, function(x) {   x$coefficients[\"cell_typeB:conditionSTIM\"] <- 0-x$coefficients[\"conditionSTIM\"]   x }) IFNB_para_null_B <- extract_para(     sce = example_sce,     marginal_list = IFNB_marginal_null_B,     n_cores = 2,     family_use = \"nb\",     new_covariate = NULL   ) IFNB_newcount_null_B <- simu_new(     sce = example_sce,     mean_mat = IFNB_para_null_B$mean_mat,     sigma_mat = IFNB_para_null_B$sigma_mat,     zero_mat = IFNB_para_null_B$zero_mat,     quantile_mat = NULL,     copula_list = IFNB_copula$copula_list,     n_cores = 2,     family_use = \"nb\",     input_data = IFNB_data$dat,     new_covariate = IFNB_data$newCovariate,     important_feature = IFNB_copula$important_feature   ) simu_res_list <- lapply(list(simu_res$new_count,IFNB_newcount_null_B ), function(x){   logcounts(example_sce) <- log1p(counts(example_sce))   simu_sce <- example_sce   counts(simu_sce) <- x   logcounts(simu_sce) <- log1p(counts(simu_sce))   return(simu_sce) }) logcounts(example_sce) <- log1p(counts(example_sce))"},{"path":"/articles/scDesign3-conditionEffect-vignette.html","id":"visulization","dir":"Articles","previous_headings":"","what":"Visulization","title":"Simulate datasets with condition effect","text":"","code":"compare_figure <- plot_reduceddim(ref_sce = example_sce,                                    sce_list = simu_res_list,                                    name_vec = c(\"Reference\", \"w/ Condition\", \"Modified Condition\"),                                   assay_use = \"logcounts\",                                    if_plot = TRUE,                                    color_by = \"cell_type\",                                    shape_by = \"condition\",                                   n_pc = 20) plot(compare_figure$p_umap)"},{"path":"/articles/scDesign3-conditionEffect-vignette.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Simulate datasets with condition effect","text":"","code":"sessionInfo() #> R version 4.2.2 Patched (2022-11-10 r83330) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] ggplot2_3.4.0               SingleCellExperiment_1.20.0 #>  [3] SummarizedExperiment_1.28.0 Biobase_2.58.0              #>  [5] GenomicRanges_1.50.2        GenomeInfoDb_1.34.6         #>  [7] IRanges_2.32.0              S4Vectors_0.36.1            #>  [9] BiocGenerics_0.44.0         MatrixGenerics_1.10.0       #> [11] matrixStats_0.63.0          scDesign3_0.99.1            #> [13] BiocStyle_2.24.0            #>  #> loaded via a namespace (and not attached): #>  [1] nlme_3.1-162           bitops_1.0-7           fs_1.5.2               #>  [4] rprojroot_2.0.3        tools_4.2.2            bslib_0.4.2            #>  [7] utf8_1.2.2             R6_2.5.1               irlba_2.3.5.1          #> [10] DBI_1.1.3              mgcv_1.8-41            colorspace_2.0-3       #> [13] withr_2.5.0            tidyselect_1.2.0       compiler_4.2.2         #> [16] textshaping_0.3.6      cli_3.6.0              desc_1.4.2             #> [19] DelayedArray_0.24.0    labeling_0.4.2         bookdown_0.31          #> [22] sass_0.4.4             scales_1.2.1           mvtnorm_1.1-3          #> [25] gamlss_5.4-10          askpass_1.1            pkgdown_2.0.7          #> [28] systemfonts_1.0.4      stringr_1.5.0          digest_0.6.31          #> [31] rmarkdown_2.19         XVector_0.38.0         pkgconfig_2.0.3        #> [34] htmltools_0.5.4        umap_0.2.9.0           highr_0.10             #> [37] fastmap_1.1.0          rlang_1.0.6            jquerylib_0.1.4        #> [40] generics_0.1.3         farver_2.1.1           gamlss.data_6.0-2      #> [43] jsonlite_1.8.4         mclust_6.0.0           dplyr_1.0.10           #> [46] RCurl_1.98-1.9         magrittr_2.0.3         GenomeInfoDbData_1.2.9 #> [49] Matrix_1.5-1           Rcpp_1.0.9             munsell_0.5.0          #> [52] fansi_1.0.3            reticulate_1.27        lifecycle_1.0.3        #> [55] stringi_1.7.12         yaml_2.3.6             MASS_7.3-58.2          #> [58] zlibbioc_1.44.0        gamlss.dist_6.0-5      grid_4.2.2             #> [61] parallel_4.2.2         lattice_0.20-45        splines_4.2.2          #> [64] knitr_1.41             pillar_1.8.1           glue_1.6.2             #> [67] evaluate_0.19          BiocManager_1.30.19    vctrs_0.5.1            #> [70] png_0.1-8              gtable_0.3.1           openssl_2.0.5          #> [73] purrr_1.0.1            assertthat_0.2.1       cachem_1.0.6           #> [76] xfun_0.36              RSpectra_0.16-1        ragg_1.2.5             #> [79] survival_3.5-3         tibble_3.1.8           memoise_2.0.1"},{"path":"/articles/scDesign3-copulaCompare-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Compare gaussian copula and vine copula","text":"tutorial, show differences using Gaussian copula vine copula simulate new data. Vine copula can better estimate high-dimensional gene-gene correlation, however, simulation vine copula takes time Gaussian copula. reference dataset 1000 genes, recommend simulate data Gaussian copula.","code":""},{"path":"/articles/scDesign3-copulaCompare-vignette.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"Compare gaussian copula and vine copula","text":"raw data R package DuoClustering2018. demonstration purpose, use Zhengmix4eq dataset package top 100 highly variable genes. filtered highly expressed housekeeping genes added TF genes.","code":"Zhengmix4eq_sce <- get(paste0(\"sce_filteredExpr10_\", \"Zhengmix4eq\"))(metadata = FALSE) rownames(Zhengmix4eq_sce) <- rowData(Zhengmix4eq_sce)$symbol colData(Zhengmix4eq_sce)$cell_type <- colData(Zhengmix4eq_sce)$phenoid humantfs <- read_csv(\"http://humantfs.ccbr.utoronto.ca/download/v_1.01/TF_names_v_1.01.txt\", col_names = FALSE) stats <- modelGeneVar(Zhengmix4eq_sce) chosen <- getTopHVGs(stats, n = 100) ### Filter out some HKGs. chosen <- union(chosen, humantfs$X1) chosen <- chosen[!stringr::str_starts(chosen, \"RP\")] chosen <- chosen[!stringr::str_starts(chosen, \"TMSB\")] chosen <- chosen[!chosen %in% c(\"B2M\", \"MALAT1\", \"ACTB\", \"ACTG1\", \"GAPDH\", \"FTL\", \"FTH1\")] Zhengmix4eq_sce_sub <- Zhengmix4eq_sce[rownames(Zhengmix4eq_sce) %in% chosen, ] print(Zhengmix4eq_sce_sub) #> class: SingleCellExperiment  #> dim: 119 3555  #> metadata(1): log.exprs.offset #> assays(3): counts logcounts normcounts #> rownames(119): TPT1 CD74 ... PHF1 IRF7 #> rowData names(10): id symbol ... total_counts log10_total_counts #> colnames(3555): b.cells6276 b.cells6144 ... regulatory.t1084 #>   regulatory.t9696 #> colData names(16): dataset barcode ... sizeFactor cell_type #> reducedDimNames(2): PCA TSNE #> mainExpName: NULL #> altExpNames(0):"},{"path":"/articles/scDesign3-copulaCompare-vignette.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Compare gaussian copula and vine copula","text":"use scdesign3 simulate two new datasets using Gaussian copula vine copula respectively.","code":"set.seed(123) Zhengmix4eq_simu_sce_gaussian <- scdesign3(sce = Zhengmix4eq_sce_sub,                             celltype = 'cell_type',                             pseudotime = NULL,                             spatial = NULL,                             other_covariates = NULL,                             corr_formula = \"cell_type\",                             mu_formula = \"cell_type\",                             sigma_formula = \"cell_type\",                             n_cores = 2,                             copula = \"gaussian\",                             assay_use = \"normcounts\",                             family_use = \"nb\",                             pseudo_obs = TRUE, return_model = TRUE) Zhengmix4eq_simu_sce_vine <- scdesign3(sce = Zhengmix4eq_sce_sub,                             celltype = 'cell_type',                             pseudotime = NULL,                             spatial = NULL,                             other_covariates = NULL,                             corr_formula = \"cell_type\",                             mu_formula = \"cell_type\",                             sigma_formula = \"cell_type\",                             n_cores = 2,                             copula = \"vine\",                             assay_use = \"normcounts\",                             family_use = \"nb\",                             pseudo_obs = TRUE, return_model = TRUE)"},{"path":"/articles/scDesign3-copulaCompare-vignette.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Compare gaussian copula and vine copula","text":"simulation result using Gaussian copula, return object contains corr_list gene-gene correlation matrices group user specified, case, groups cell types. simulation result using vine copula, corr_list gives vine structure group user specified, case, groups cell types. reformat two corr_list visualize . first visualize corr_list returned use Gaussian copula.  visualize corr_list returned use vine copula. Comparing visualization , plots give direct visualization genes connected vine structure show gene networks.","code":"Zhengmix4eq_corr_list <- Zhengmix4eq_simu_sce_gaussian$corr_list  names(Zhengmix4eq_corr_list) <- c(\"b.cells\", \"naive.cytotoxic\", \"cd14.monocytes\", \"regulatory.t\")  heatmap_order <- order(rowData(Zhengmix4eq_sce_sub)$mean_counts)  Zhengmix4eq_corr_list <- lapply(Zhengmix4eq_corr_list, function(x) {   x <- x[heatmap_order, heatmap_order]   x })    cor_melted <- lapply(Zhengmix4eq_corr_list, reshape2::melt)   cor_dat <- Reduce(rbind, cor_melted)   cor_dat$Method <- Reduce(c, lapply(c(\"b.cells\", \"naive.cytotoxic\", \"cd14.monocytes\", \"regulatory.t\"), function(x){     rep(x, nrow(cor_melted[[x]]))   }))   cor_dat$Method <- factor(cor_dat$Method, levels = c(\"cd14.monocytes\",  \"b.cells\",\"regulatory.t\",  \"naive.cytotoxic\")) cor_dat <- cor_dat %>% dplyr::mutate(Method = if_else(Method == \"b.cells\", \"B cell\", if_else(Method == \"cd14.monocytes\", \"CD14+ monocyte\", if_else(Method == \"regulatory.t\", \"Regulatory T cell\", \"Naive cytotoxic T cell\")))) %>% dplyr::mutate(Method = factor(Method, levels = c(\"CD14+ monocyte\", \"B cell\", \"Regulatory T cell\", \"Naive cytotoxic T cell\"))) corr_p <- cor_dat %>% ggplot(                         aes(Var2, Var1, fill = value))+       facet_wrap(~Method, nrow = 1) + #, labeller = label_parsed       geom_tile() +       scale_fill_gradient2(low = \"blue\", high = \"red\", mid = \"white\",                            midpoint = 0, limit = c(-1, 1), space = \"Lab\",                            name=\"Pearson\\nCorrelation\") +       theme(panel.spacing.x=unit(0, \"lines\"),panel.spacing.y=unit(1, \"lines\"),         legend.position = \"right\",         panel.border = element_rect(colour = \"black\", fill=NA, size=0.5),             axis.text.x = element_blank(),             axis.ticks.x = element_blank(),             axis.text.y = element_blank(),             axis.ticks.y = element_blank())+       xlab(\"\") + ylab(\"\") + coord_fixed() corr_p vine_list <- Zhengmix4eq_simu_sce_vine$corr_list plt1 <- plot(vine_list[[3]], tree = 1, var_names = \"use\")+ theme(aspect.ratio = 1, title = element_blank()) plt2 <- plot(vine_list[[1]], tree = 1, var_names = \"use\")+ theme(aspect.ratio = 1, title = element_blank()) plt3 <- plot(vine_list[[4]], tree = 1, var_names = \"use\")+ theme(aspect.ratio = 1, title = element_blank()) plt4 <- plot(vine_list[[2]], tree = 1, var_names = \"use\")+ theme(aspect.ratio = 1, title = element_blank()) degree_thresh <- 3  igr_obj1 <- get(\"g\", plt1$plot_env)[[1]]  p1 <- ggraph::ggraph(igr_obj1, \"igraph\",       algorithm = \"tree\", circular = TRUE     ) + ggraph::geom_edge_link(colour = \"#C0C0C0\")+       ggraph::geom_node_point(col = \"#56B4E9\", size = 2) +       ggplot2::theme_void()+ ggraph::geom_node_text(ggplot2::aes(filter = igraph::degree(igr_obj1) > degree_thresh, label = name),         fontface = \"bold\",         repel = TRUE, check_overlap = TRUE, size = 3       )+ theme(aspect.ratio = 1,                 panel.background = element_blank(),         panel.grid.major = element_blank(),         panel.grid.minor = element_blank(),         axis.line = element_line(colour = \"black\"),         panel.border = element_rect(colour = \"black\", fill=NA, size=1))  igr_obj2 <- get(\"g\", plt2$plot_env)[[1]]  p2 <- ggraph::ggraph(igr_obj2, \"igraph\",       algorithm = \"tree\", circular = TRUE     ) + ggraph::geom_edge_link(colour = \"#C0C0C0\")+       ggraph::geom_node_point(col = \"#56B4E9\", size = 2) +       ggplot2::theme_void()+ ggraph::geom_node_text(ggplot2::aes(filter = igraph::degree(igr_obj2) > degree_thresh, label = name),         fontface = \"bold\",         repel = TRUE, check_overlap = TRUE, size = 3       )+ theme(aspect.ratio = 1,                 panel.background = element_blank(),         panel.grid.major = element_blank(),         panel.grid.minor = element_blank(),         axis.line = element_line(colour = \"black\"),         panel.border = element_rect(colour = \"black\", fill=NA, size=1))  igr_obj3 <- get(\"g\", plt3$plot_env)[[1]]  p3 <- ggraph::ggraph(igr_obj3, \"igraph\",       algorithm = \"tree\", circular = TRUE     ) + ggraph::geom_edge_link(colour = \"#C0C0C0\")+       ggraph::geom_node_point(col = \"#56B4E9\", size = 2) +       ggplot2::theme_void()+ ggraph::geom_node_text(ggplot2::aes(filter = igraph::degree(igr_obj3) > degree_thresh, label = name),         fontface = \"bold\",         repel = TRUE, check_overlap = TRUE, size = 3       )+ theme(aspect.ratio = 1,                 panel.background = element_blank(),         panel.grid.major = element_blank(),         panel.grid.minor = element_blank(),         axis.line = element_line(colour = \"black\"),         panel.border = element_rect(colour = \"black\", fill=NA, size=1))  igr_obj4 <- get(\"g\", plt4$plot_env)[[1]]  p4 <- ggraph::ggraph(igr_obj4, \"igraph\",       algorithm = \"tree\", circular = TRUE     ) + ggraph::geom_edge_link(colour = \"#C0C0C0\")+       ggraph::geom_node_point(col = \"#56B4E9\", size = 2) +       ggplot2::theme_void()+ ggraph::geom_node_text(ggplot2::aes(filter = igraph::degree(igr_obj4) > degree_thresh, label = name),         fontface = \"bold\",         repel = TRUE, check_overlap = TRUE, size = 3       ) + theme(aspect.ratio = 1,                 panel.background = element_blank(),         panel.grid.major = element_blank(),         panel.grid.minor = element_blank(),         axis.line = element_line(colour = \"black\"),         panel.border = element_rect(colour = \"black\", fill=NA, size=0.5)) vine_dat <- list(igr_obj1, igr_obj2, igr_obj3, igr_obj4) p_vine <- cowplot::plot_grid(p1 + ggtitle(\"CD14+ monocyte\"), p2 + ggtitle(\"B cell\"), p3 + ggtitle(\"Regulatory T cell\"), p4 + ggtitle(\"Naive cytotoxic T cell\"), nrow = 1, align = \"hv\") p_vine"},{"path":"/articles/scDesign3-copulaCompare-vignette.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Compare gaussian copula and vine copula","text":"","code":"sessionInfo() #> R version 4.2.2 Patched (2022-11-10 r83330) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] rvinecopulib_0.6.2.1.3      forcats_0.5.2               #>  [3] stringr_1.5.0               purrr_1.0.1                 #>  [5] readr_2.1.3                 tidyr_1.2.1                 #>  [7] tibble_3.1.8                tidyverse_1.3.2             #>  [9] igraph_1.3.5                dplyr_1.0.10                #> [11] scran_1.24.1                ggrepel_0.9.2               #> [13] tidygraph_1.2.2             scater_1.24.0               #> [15] ggplot2_3.4.0               scuttle_1.8.3               #> [17] SingleCellExperiment_1.20.0 SummarizedExperiment_1.28.0 #> [19] Biobase_2.58.0              GenomicRanges_1.50.2        #> [21] GenomeInfoDb_1.34.6         IRanges_2.32.0              #> [23] S4Vectors_0.36.1            BiocGenerics_0.44.0         #> [25] MatrixGenerics_1.10.0       matrixStats_0.63.0          #> [27] DuoClustering2018_1.14.0    scDesign3_0.99.1            #> [29] BiocStyle_2.24.0            #>  #> loaded via a namespace (and not attached): #>   [1] utf8_1.2.2                    tidyselect_1.2.0              #>   [3] RSQLite_2.2.20                AnnotationDbi_1.58.0          #>   [5] grid_4.2.2                    BiocParallel_1.32.5           #>   [7] munsell_0.5.0                 ScaledMatrix_1.4.1            #>   [9] codetools_0.2-19              ragg_1.2.5                    #>  [11] statmod_1.5.0                 withr_2.5.0                   #>  [13] colorspace_2.0-3              filelock_1.0.2                #>  [15] highr_0.10                    knitr_1.41                    #>  [17] rngWELL_0.10-8                labeling_0.4.2                #>  [19] GenomeInfoDbData_1.2.9        polyclip_1.10-4               #>  [21] farver_2.1.1                  bit64_4.0.5                   #>  [23] rprojroot_2.0.3               vctrs_0.5.1                   #>  [25] generics_0.1.3                xfun_0.36                     #>  [27] ggthemes_4.2.4                timechange_0.2.0              #>  [29] BiocFileCache_2.6.0           R6_2.5.1                      #>  [31] graphlayouts_0.8.4            ggbeeswarm_0.7.1              #>  [33] rsvd_1.0.5                    locfit_1.5-9.7                #>  [35] bitops_1.0-7                  cachem_1.0.6                  #>  [37] DelayedArray_0.24.0           assertthat_0.2.1              #>  [39] promises_1.2.0.1              scales_1.2.1                  #>  [41] vroom_1.6.0                   ggraph_2.1.0                  #>  [43] googlesheets4_1.0.1           beeswarm_0.4.0                #>  [45] gtable_0.3.1                  beachmat_2.14.0               #>  [47] rlang_1.0.6                   systemfonts_1.0.4             #>  [49] splines_4.2.2                 gargle_1.2.1                  #>  [51] broom_1.0.2                   BiocManager_1.30.19           #>  [53] yaml_2.3.6                    reshape2_1.4.4                #>  [55] modelr_0.1.10                 backports_1.4.1               #>  [57] httpuv_1.6.8                  tools_4.2.2                   #>  [59] bookdown_0.31                 ellipsis_0.3.2                #>  [61] gamlss.data_6.0-2             jquerylib_0.1.4               #>  [63] gamlss_5.4-10                 Rcpp_1.0.9                    #>  [65] plyr_1.8.8                    sparseMatrixStats_1.10.0      #>  [67] zlibbioc_1.44.0               RCurl_1.98-1.9                #>  [69] viridis_0.6.2                 cowplot_1.1.1                 #>  [71] haven_2.5.1                   cluster_2.1.4                 #>  [73] fs_1.5.2                      magrittr_2.0.3                #>  [75] reprex_2.0.2                  googledrive_2.0.0             #>  [77] mvtnorm_1.1-3                 hms_1.1.2                     #>  [79] mime_0.12                     evaluate_0.19                 #>  [81] xtable_1.8-4                  mclust_6.0.0                  #>  [83] readxl_1.4.1                  gridExtra_2.3                 #>  [85] compiler_4.2.2                randtoolbox_2.0.3             #>  [87] crayon_1.5.2                  htmltools_0.5.4               #>  [89] mgcv_1.8-41                   kde1d_1.0.5                   #>  [91] later_1.3.0                   tzdb_0.3.0                    #>  [93] lubridate_1.9.0               DBI_1.1.3                     #>  [95] tweenr_2.0.2                  ExperimentHub_2.4.0           #>  [97] dbplyr_2.2.1                  MASS_7.3-58.2                 #>  [99] rappdirs_0.3.3                Matrix_1.5-1                  #> [101] cli_3.6.0                     parallel_4.2.2                #> [103] metapod_1.4.0                 pkgconfig_2.0.3               #> [105] pkgdown_2.0.7                 xml2_1.3.3                    #> [107] vipor_0.4.5                   bslib_0.4.2                   #> [109] dqrng_0.3.0                   gamlss.dist_6.0-5             #> [111] XVector_0.38.0                rvest_1.0.3                   #> [113] digest_0.6.31                 Biostrings_2.64.1             #> [115] rmarkdown_2.19                cellranger_1.1.0              #> [117] edgeR_3.40.1                  DelayedMatrixStats_1.20.0     #> [119] curl_5.0.0                    shiny_1.7.4                   #> [121] lifecycle_1.0.3               nlme_3.1-162                  #> [123] jsonlite_1.8.4                BiocNeighbors_1.14.0          #> [125] desc_1.4.2                    viridisLite_0.4.1             #> [127] limma_3.54.0                  fansi_1.0.3                   #> [129] pillar_1.8.1                  lattice_0.20-45               #> [131] KEGGREST_1.36.3               fastmap_1.1.0                 #> [133] httr_1.4.4                    survival_3.5-3                #> [135] interactiveDisplayBase_1.34.0 glue_1.6.2                    #> [137] png_0.1-8                     bluster_1.6.0                 #> [139] BiocVersion_3.15.2            bit_4.0.5                     #> [141] ggforce_0.4.1                 stringi_1.7.12                #> [143] sass_0.4.4                    blob_1.2.3                    #> [145] textshaping_0.3.6             BiocSingular_1.12.0           #> [147] AnnotationHub_3.4.0           memoise_2.0.1                 #> [149] irlba_2.3.5.1"},{"path":"/articles/scDesign3-introduction-vignette.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"scDesign3 Introduction","text":"raw data scvelo, describes pancreatic endocrinogenesis. pre-select top 1000 highly variable genes filter cell types ensure single trajectory. save computational time, use top 100 genes.","code":"example_sce <- readRDS((url(\"https://www.dropbox.com/s/p1mvl5osxp55sot/PANCREAS_sce.rds?raw=1\"))) print(example_sce) #> class: SingleCellExperiment  #> dim: 1000 2087  #> metadata(5): clusters_coarse_colors clusters_colors day_colors #>   neighbors pca #> assays(6): X spliced ... cpm logcounts #> rownames(1000): Pyy Iapp ... Eya2 Kif21a #> rowData names(1): highly_variable_genes #> colnames(2087): AAACCTGAGAGGGATA AAACCTGGTAAGTGGC ... TTTGTCAAGTGACATA #>   TTTGTCAAGTGTGGCA #> colData names(7): clusters_coarse clusters ... sizeFactor pseudotime #> reducedDimNames(4): X_pca X_umap PCA UMAP #> mainExpName: NULL #> altExpNames(0): example_sce <- example_sce[1:100, ]"},{"path":"/articles/scDesign3-introduction-vignette.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"scDesign3 Introduction","text":"function scdesign3() one-shot function can generate new dataset. create SingleCellExperiment objects using new count matrices generated store logcounts.","code":"set.seed(123) example_simu <- scdesign3(     sce = example_sce,     assay_use = \"counts\",     celltype = \"cell_type\",     pseudotime = \"pseudotime\",     spatial = NULL,     other_covariates = NULL,     mu_formula = \"s(pseudotime, k = 10, bs = 'cr')\",     sigma_formula = \"s(pseudotime, k = 5, bs = 'cr')\",     family_use = \"nb\",     n_cores = 2,     usebam = FALSE,     corr_formula = \"1\",     copula = \"gaussian\",     DT = TRUE,     pseudo_obs = FALSE,     return_model = FALSE,     nonzerovar = FALSE   ) logcounts(example_sce) <- log1p(counts(example_sce)) simu_sce <- example_sce counts(simu_sce) <- example_simu$new_count logcounts(simu_sce) <- log1p(counts(simu_sce))"},{"path":"/articles/scDesign3-introduction-vignette.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"scDesign3 Introduction","text":"save time, ggplot objects based reference simulated data’s UMAP embedding pre-saved.","code":"compare_figure <- plot_reduceddim(ref_sce = example_sce,                                    sce_list = list(simu_sce),                                    name_vec = c(\"Reference\", \"scDesign3\"),                                   assay_use = \"logcounts\",                                    if_plot = TRUE,                                    color_by = \"pseudotime\",                                    n_pc = 20) compare_figure <- readRDS(\"~/scDesign3_vignette/intro_ggplot1.rds\") plot(compare_figure$p_umap)"},{"path":"/articles/scDesign3-introduction-vignette.html","id":"step-by-step-functions","dir":"Articles","previous_headings":"","what":"Step-by-step functions","title":"scDesign3 Introduction","text":"Alternatively, can run following steps generate new dataset. code exactly thing one-shot function . Construct input dataset. Fit regression models feature based specification. Fit copula, obtain AIC BIC. Extract estimated parameters can make modifications use modified parameters generate new data needed. can extract following parameters: cell--gene mean matrix cell--gene matrix \\(\\frac{1}{\\phi}\\) negative binomial distribution cell--gene matrix standard deviation \\(\\sigma\\) Gaussian distribution cell--gene matrix 1 poisson distribution cell--gene matrix zero probabilities zero-inflated negative binomial zero-inflated poisson distributions zero matrix negative binomial, Gaussian, poisson distributions Simulate new count matrix. , can create SinglecellExperiment object using synthetic count matrix store logcounts input synthetic SinglecellExperiment objects.","code":"PANCREAS_data <- construct_data(     sce = example_sce,     assay_use = \"counts\",     celltype = \"cell_type\",     pseudotime = \"pseudotime\",     spatial = NULL,     other_covariates = NULL,     corr_by = \"1\"   ) PANCREAS_marginal <- fit_marginal(     data = PANCREAS_data,     predictor = \"gene\",     mu_formula = \"s(pseudotime, k = 10, bs = 'cr')\",     sigma_formula = \"s(pseudotime, k = 5, bs = 'cr')\",     family_use = \"nb\",     n_cores = 2,     usebam = FALSE   ) PANCREAS_copula <- fit_copula(     sce = example_sce,     assay_use = \"counts\",     marginal_list = PANCREAS_marginal,     family_use = \"nb\",     copula = \"gaussian\",     n_cores = 2,     new_covariate = NULL,     input_data = PANCREAS_data$dat   ) PANCREAS_para <- extract_para(     sce = example_sce,     marginal_list = PANCREAS_marginal,     n_cores = 1,     family_use = \"nb\",     new_covariate = NULL   ) PANCREAS_newcount <- simu_new(     sce = example_sce,     mean_mat = PANCREAS_para$mean_mat,     sigma_mat = PANCREAS_para$sigma_mat,     zero_mat = PANCREAS_para$zero_mat,     quantile_mat = NULL,     copula_list = PANCREAS_copula$copula_list,     n_cores = 1,     family_use = \"nb\",     input_data = PANCREAS_data$dat,     new_covariate = PANCREAS_data$newCovariate,     important_feature = PANCREAS_copula$important_feature   ) logcounts(example_sce) <- log1p(counts(example_sce)) simu_sce <- example_sce counts(simu_sce) <- PANCREAS_newcount logcounts(simu_sce) <- log1p(counts(simu_sce))"},{"path":"/articles/scDesign3-introduction-vignette.html","id":"visualization-1","dir":"Articles","previous_headings":"","what":"Visualization","title":"scDesign3 Introduction","text":"","code":"compare_figure <- plot_reduceddim(ref_sce = example_sce,                                    sce_list = list(simu_sce),                                    name_vec = c(\"Reference\", \"scDesign3\"),                                   assay_use = \"logcounts\",                                    if_plot = TRUE,                                    color_by = \"pseudotime\",                                    n_pc = 20) plot(compare_figure$p_umap)"},{"path":"/articles/scDesign3-introduction-vignette.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"scDesign3 Introduction","text":"","code":"sessionInfo() #> R version 4.2.2 Patched (2022-11-10 r83330) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] SingleCellExperiment_1.20.0 SummarizedExperiment_1.28.0 #>  [3] Biobase_2.58.0              GenomicRanges_1.50.2        #>  [5] GenomeInfoDb_1.34.6         IRanges_2.32.0              #>  [7] S4Vectors_0.36.1            BiocGenerics_0.44.0         #>  [9] MatrixGenerics_1.10.0       matrixStats_0.63.0          #> [11] ggplot2_3.4.0               scDesign3_0.99.1            #> [13] BiocStyle_2.24.0            #>  #> loaded via a namespace (and not attached): #>  [1] nlme_3.1-162           bitops_1.0-7           fs_1.5.2               #>  [4] rprojroot_2.0.3        tools_4.2.2            bslib_0.4.2            #>  [7] utf8_1.2.2             R6_2.5.1               irlba_2.3.5.1          #> [10] DBI_1.1.3              mgcv_1.8-41            colorspace_2.0-3       #> [13] withr_2.5.0            tidyselect_1.2.0       gridExtra_2.3          #> [16] compiler_4.2.2         textshaping_0.3.6      cli_3.6.0              #> [19] desc_1.4.2             DelayedArray_0.24.0    labeling_0.4.2         #> [22] bookdown_0.31          sass_0.4.4             scales_1.2.1           #> [25] mvtnorm_1.1-3          gamlss_5.4-10          askpass_1.1            #> [28] pkgdown_2.0.7          systemfonts_1.0.4      stringr_1.5.0          #> [31] digest_0.6.31          rmarkdown_2.19         XVector_0.38.0         #> [34] pkgconfig_2.0.3        htmltools_0.5.4        umap_0.2.9.0           #> [37] highr_0.10             fastmap_1.1.0          rlang_1.0.6            #> [40] farver_2.1.1           jquerylib_0.1.4        generics_0.1.3         #> [43] gamlss.data_6.0-2      jsonlite_1.8.4         mclust_6.0.0           #> [46] dplyr_1.0.10           RCurl_1.98-1.9         magrittr_2.0.3         #> [49] GenomeInfoDbData_1.2.9 Matrix_1.5-1           Rcpp_1.0.9             #> [52] munsell_0.5.0          fansi_1.0.3            reticulate_1.27        #> [55] viridis_0.6.2          lifecycle_1.0.3        stringi_1.7.12         #> [58] yaml_2.3.6             MASS_7.3-58.2          zlibbioc_1.44.0        #> [61] gamlss.dist_6.0-5      grid_4.2.2             parallel_4.2.2         #> [64] lattice_0.20-45        splines_4.2.2          knitr_1.41             #> [67] pillar_1.8.1           glue_1.6.2             evaluate_0.19          #> [70] BiocManager_1.30.19    vctrs_0.5.1            png_0.1-8              #> [73] gtable_0.3.1           openssl_2.0.5          purrr_1.0.1            #> [76] assertthat_0.2.1       cachem_1.0.6           xfun_0.36              #> [79] RSpectra_0.16-1        viridisLite_0.4.1      ragg_1.2.5             #> [82] survival_3.5-3         tibble_3.1.8           memoise_2.0.1"},{"path":"/articles/scDesign3-librarySize-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulate datasets with cell library size","text":"tutorial, show use scDesign3 simulate datasets adjusted cell library size. purpose tutorial show including library size modeling marginal distribution gene can help cells synthetic data similar library sizes cells real data.","code":""},{"path":"/articles/scDesign3-librarySize-vignette.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"Simulate datasets with cell library size","text":"raw data R package DuoClustering2018 contain set datasets true cell type labels. calculate library size cell.","code":"sce <- get(\"sce_filteredExpr10_Zhengmix4eq\")(metadata = FALSE) colData(sce)$cell_type = as.factor(colData(sce)$phenoid) colData(sce)$library = colSums(counts(sce))"},{"path":"/articles/scDesign3-librarySize-vignette.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Simulate datasets with cell library size","text":", set mu_formula cell_type offsetted cell library size generate new dataset adjusted library size. library size log-transformed link function \\(\\mu\\) negative binomial distribution GAMLSS \\(\\log\\). , can create SinglecellExperiment object using synthetic count matrix store logcounts input synthetic SinglecellExperiment objects.","code":"set.seed(123) example_simu <- scdesign3(     sce = sce,     assay_use = \"counts\",     celltype = \"cell_type\",     pseudotime = NULL,     spatial = NULL,     other_covariates = \"library\",     mu_formula = \"cell_type + offset(log(library))\",     sigma_formula = \"cell_type\",     family_use = \"nb\",     n_cores = 2,     usebam = FALSE,     corr_formula = \"1\",     copula = \"gaussian\",     DT = TRUE,     pseudo_obs = FALSE,     return_model = FALSE,     nonzerovar = FALSE   ) logcounts(sce) <- log1p(counts(sce)) simu_sce <- sce counts(simu_sce) <- example_simu$new_count logcounts(simu_sce) <- log1p(counts(simu_sce)) colData(simu_sce)$library <- colSums(counts(simu_sce))"},{"path":"/articles/scDesign3-librarySize-vignette.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Simulate datasets with cell library size","text":"violin plot shows cells simulated dataset similar library size cells reference dataset.","code":"set.seed(123) compare_figure <- plot_reduceddim(ref_sce = sce,                                    sce_list = list(simu_sce),                                    name_vec = c(\"Reference\", \"scDesign3\"),                                   assay_use = \"logcounts\",                                    if_plot = TRUE,                                    color_by = \"cell_type\",                                    n_pc = 20) plot(compare_figure$p_umap) df1 = colData(sce) %>% as_tibble() %>% select(library) %>% mutate(Method = \"Reference\") df2 = colData(simu_sce) %>% as_tibble()  %>% select(library) %>% mutate(Method = \"scDesign3\") df = rbind(df1,df2) ggplot(df, aes(x = Method, y = library, color = Method)) +      geom_violin() + theme(aspect.ratio=1)"},{"path":"/articles/scDesign3-librarySize-vignette.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Simulate datasets with cell library size","text":"","code":"sessionInfo() #> R version 4.2.2 Patched (2022-11-10 r83330) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] forcats_0.5.2               stringr_1.5.0               #>  [3] dplyr_1.0.10                purrr_1.0.1                 #>  [5] readr_2.1.3                 tidyr_1.2.1                 #>  [7] tibble_3.1.8                tidyverse_1.3.2             #>  [9] scran_1.24.1                scuttle_1.8.3               #> [11] DuoClustering2018_1.14.0    ggplot2_3.4.0               #> [13] SingleCellExperiment_1.20.0 SummarizedExperiment_1.28.0 #> [15] Biobase_2.58.0              GenomicRanges_1.50.2        #> [17] GenomeInfoDb_1.34.6         IRanges_2.32.0              #> [19] S4Vectors_0.36.1            BiocGenerics_0.44.0         #> [21] MatrixGenerics_1.10.0       matrixStats_0.63.0          #> [23] scDesign3_0.99.1            BiocStyle_2.24.0            #>  #> loaded via a namespace (and not attached): #>   [1] readxl_1.4.1                  backports_1.4.1               #>   [3] AnnotationHub_3.4.0           BiocFileCache_2.6.0           #>   [5] systemfonts_1.0.4             plyr_1.8.8                    #>   [7] igraph_1.3.5                  splines_4.2.2                 #>   [9] gamlss_5.4-10                 BiocParallel_1.32.5           #>  [11] digest_0.6.31                 htmltools_0.5.4               #>  [13] viridis_0.6.2                 fansi_1.0.3                   #>  [15] magrittr_2.0.3                memoise_2.0.1                 #>  [17] ScaledMatrix_1.4.1            googlesheets4_1.0.1           #>  [19] cluster_2.1.4                 tzdb_0.3.0                    #>  [21] limma_3.54.0                  Biostrings_2.64.1             #>  [23] modelr_0.1.10                 askpass_1.1                   #>  [25] timechange_0.2.0              pkgdown_2.0.7                 #>  [27] colorspace_2.0-3              rvest_1.0.3                   #>  [29] blob_1.2.3                    rappdirs_0.3.3                #>  [31] gamlss.data_6.0-2             haven_2.5.1                   #>  [33] textshaping_0.3.6             xfun_0.36                     #>  [35] crayon_1.5.2                  RCurl_1.98-1.9                #>  [37] jsonlite_1.8.4                survival_3.5-3                #>  [39] glue_1.6.2                    gargle_1.2.1                  #>  [41] gtable_0.3.1                  zlibbioc_1.44.0               #>  [43] XVector_0.38.0                DelayedArray_0.24.0           #>  [45] BiocSingular_1.12.0           scales_1.2.1                  #>  [47] mvtnorm_1.1-3                 DBI_1.1.3                     #>  [49] edgeR_3.40.1                  ggthemes_4.2.4                #>  [51] Rcpp_1.0.9                    viridisLite_0.4.1             #>  [53] xtable_1.8-4                  reticulate_1.27               #>  [55] dqrng_0.3.0                   bit_4.0.5                     #>  [57] rsvd_1.0.5                    mclust_6.0.0                  #>  [59] umap_0.2.9.0                  metapod_1.4.0                 #>  [61] httr_1.4.4                    ellipsis_0.3.2                #>  [63] farver_2.1.1                  pkgconfig_2.0.3               #>  [65] sass_0.4.4                    dbplyr_2.2.1                  #>  [67] locfit_1.5-9.7                utf8_1.2.2                    #>  [69] labeling_0.4.2                tidyselect_1.2.0              #>  [71] rlang_1.0.6                   reshape2_1.4.4                #>  [73] later_1.3.0                   AnnotationDbi_1.58.0          #>  [75] cellranger_1.1.0              munsell_0.5.0                 #>  [77] BiocVersion_3.15.2            tools_4.2.2                   #>  [79] cachem_1.0.6                  cli_3.6.0                     #>  [81] generics_0.1.3                RSQLite_2.2.20                #>  [83] ExperimentHub_2.4.0           broom_1.0.2                   #>  [85] evaluate_0.19                 fastmap_1.1.0                 #>  [87] yaml_2.3.6                    ragg_1.2.5                    #>  [89] knitr_1.41                    bit64_4.0.5                   #>  [91] fs_1.5.2                      KEGGREST_1.36.3               #>  [93] nlme_3.1-162                  sparseMatrixStats_1.10.0      #>  [95] mime_0.12                     xml2_1.3.3                    #>  [97] compiler_4.2.2                filelock_1.0.2                #>  [99] curl_5.0.0                    png_0.1-8                     #> [101] interactiveDisplayBase_1.34.0 reprex_2.0.2                  #> [103] statmod_1.5.0                 bslib_0.4.2                   #> [105] stringi_1.7.12                highr_0.10                    #> [107] RSpectra_0.16-1               desc_1.4.2                    #> [109] lattice_0.20-45               bluster_1.6.0                 #> [111] Matrix_1.5-1                  vctrs_0.5.1                   #> [113] pillar_1.8.1                  lifecycle_1.0.3               #> [115] BiocManager_1.30.19           jquerylib_0.1.4               #> [117] BiocNeighbors_1.14.0          bitops_1.0-7                  #> [119] irlba_2.3.5.1                 httpuv_1.6.8                  #> [121] R6_2.5.1                      bookdown_0.31                 #> [123] promises_1.2.0.1              gridExtra_2.3                 #> [125] codetools_0.2-19              MASS_7.3-58.2                 #> [127] assertthat_0.2.1              openssl_2.0.5                 #> [129] rprojroot_2.0.3               withr_2.5.0                   #> [131] GenomeInfoDbData_1.2.9        mgcv_1.8-41                   #> [133] hms_1.1.2                     parallel_4.2.2                #> [135] grid_4.2.2                    beachmat_2.14.0               #> [137] rmarkdown_2.19                DelayedMatrixStats_1.20.0     #> [139] googledrive_2.0.0             lubridate_1.9.0               #> [141] shiny_1.7.4                   gamlss.dist_6.0-5"},{"path":"/articles/scDesign3-marginal-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"scDesign3 marginal distribution for genes","text":"tutorial, explain different forms function can used fitting marginal distribution gene.","code":""},{"path":"/articles/scDesign3-marginal-vignette.html","id":"notation","dir":"Articles","previous_headings":"","what":"Notation","title":"scDesign3 marginal distribution for genes","text":"following notations used: \\({\\mathbf{Y}} = [Y_{ij}] \\\\mathbb{R}^{n \\times m}\\): cell--feature matrix \\(n\\) cells rows, \\(m\\) features columns, \\(Y_{ij}\\) measurement feature \\(j\\) cell \\(\\); single-cell sequencing data, \\({\\mathbf{Y}}\\) often count matrix. \\(\\mathbf{X} = [\\mathbf{x}_1, \\cdots, \\mathbf{x}_n]^T \\\\mathbb{R}^{n\\times p}\\): cell--state-covariate matrix \\(n\\) cells rows \\(p\\) cell-state covariates columns; example covariates cell type, cell pseudotime, cell spatial locations. \\(\\mathbf{Z} = [\\mathbf{b}, \\mathbf{c}]\\): \\(\\mathbf{b} = (b_1, \\ldots, b_n)^T\\) \\(b_i \\\\{1, \\ldots, B \\}\\) representing cell \\(\\)’s batch, \\(\\mathbf{c} = (c_1, \\ldots, c_n)^T\\) \\(c_i \\\\{1, \\ldots, C \\}\\) representing cell \\(\\)’s condition. feature \\(j=1,\\ldots,m\\) every cell \\(=1,\\ldots,n\\), measurement \\(Y_{ij}\\)—conditional cell \\(\\)’s state covariates \\(\\mathbf{x_i}\\) design covariates \\(\\mathbf{z}_i = (b_i, c_i)^T\\)—assumed follow distribution \\(F_{j}( \\cdot~|~\\mathbf{x}_i, \\mathbf{z}_i~;~\\mu_{ij}, \\sigma_{ij}, p_{ij})\\), specified generalized additive model location, scale shape (GAMLSS). various specifications \\(f_{jc_i}(\\cdot)\\), \\(g_{jc_i}(\\cdot)\\), \\(h_{jc_i}(\\cdot)\\) summarized next section. \\[\\begin{equation} \\begin{cases}             Y_{ij}~|~\\mathbf{x}_i, \\mathbf{z}_i &\\overset{\\mathrm{ind}}{\\sim} F_{j}( \\cdot~|~\\mathbf{x}_i, \\mathbf{z}_i~;~\\mu_{ij}, \\sigma_{ij}, p_{ij})\\\\             \\theta_{j}(\\mu_{ij}) &= \\alpha_{j0} + \\alpha_{jb_i} + \\alpha_{jc_i} + f_{jc_i}(\\mathbf{x}_i) \\\\             \\log(\\sigma_{ij}) &= \\beta_{j0}+ \\beta_{jb_i} + \\beta_{jc_i} + g_{jc_i}(\\mathbf{x}_i) \\\\             \\operatorname{logit}(p_{ij}) &= \\gamma_{j0} + \\gamma_{jb_i}+ \\gamma_{jc_i}+ h_{jc_i}(\\mathbf{x}_i) \\\\ \\end{cases} \\, \\end{equation}\\]","code":""},{"path":[]},{"path":"/articles/scDesign3-multiomics-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulate multi-omics data from single-omic data","text":"tutorial, show use scDesign3 simulate multi-omics (RNA expression + DNA methylation) data learning real data single modality. example data aligned low-dimensional embeddings Pamona.","code":""},{"path":"/articles/scDesign3-multiomics-vignette.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"Simulate multi-omics data from single-omic data","text":"first combine cell-level data scRNA-seq data DNA methylation data.","code":"SCGEMMETH_sce <- readRDS((url(\"https://www.dropbox.com/sh/0tptrft7hsstpi3/AAAo-79sEfTkvrEig0q4L5Oia/SCGEMMETH_sce.rds?raw=1\"))) SCGEMRNA_sce <-readRDS((url(\"https://www.dropbox.com/sh/0tptrft7hsstpi3/AADEKgmZG4FsW5tdbu1fdYKda/SCGEMRNA_sce.rds?raw=1\"))) print(SCGEMMETH_sce) print(SCGEMRNA_sce) coldata_bind <- bind_rows(as_tibble(colData(SCGEMRNA_sce)) %>% dplyr::mutate(Tech = \"RNA\"), as_tibble(colData(SCGEMMETH_sce)) %>% dplyr::mutate(Tech = \"Methylation\")) head(coldata_bind)"},{"path":"/articles/scDesign3-multiomics-vignette.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Simulate multi-omics data from single-omic data","text":"first use step--step functions fit genes’ marginal models, copulas, extract simulation parameters separately scRNA-seq data DNA methylation data. Note actually treat 2D aligned UMAPs kind “pseudo”-spatial data. use tensor regression spline fit two ref datasets seperately.","code":"set.seed(123) RNA_data <- scDesign3::construct_data(   SCGEMRNA_sce,    assay_use = \"logcounts\",    celltype = \"cell_type\",    pseudotime = NULL,    spatial = c(\"UMAP1_integrated\", \"UMAP2_integrated\"),    other_covariates = NULL,    corr_by = c(\"UMAP1_integrated\", \"UMAP2_integrated\")   ) METH_data <- scDesign3::construct_data(   SCGEMMETH_sce,    assay_use = \"counts\",    celltype = \"cell_type\",    pseudotime = NULL,    spatial = c(\"UMAP1_integrated\", \"UMAP2_integrated\"),    other_covariates = NULL,    corr_by = c(\"UMAP1_integrated\", \"UMAP2_integrated\")) RNA_marginal <- scDesign3::fit_marginal(   data = RNA_data,    predictor = \"gene\",    mu_formula = \"te(UMAP1_integrated, UMAP2_integrated, bs = 'cr', k = 10)\",    sigma_formula = \"te(UMAP1_integrated, UMAP2_integrated, bs = 'cr', k = 5)\",    family_use = \"gaussian\",    n_cores = 2,    usebam = FALSE)  METH_marginal <- scDesign3::fit_marginal(   data = METH_data,    predictor = \"gene\",    mu_formula = \"te(UMAP1_integrated, UMAP2_integrated, bs = 'cr', k = 10)\",    sigma_formula = \"1\",    family_use = \"binomial\",    n_cores = 2,    usebam = FALSE) RNA_copula <- scDesign3::fit_copula(     sce = SCGEMRNA_sce,     assay_use = \"logcounts\",     marginal_list = RNA_marginal,     family_use = \"gaussian\",     copula = \"vine\",     n_cores = 2,     new_covariate = NULL,     input_data = RNA_data$dat   )  METH_copula <- scDesign3::fit_copula(     sce = SCGEMMETH_sce,     assay_use = \"counts\",     marginal_list = METH_marginal,     family_use = \"binomial\",     copula = \"vine\",     n_cores = 2,     new_covariate = NULL,     input_data = METH_data$dat   ) RNA_para <- extract_para(     sce = SCGEMRNA_sce,     marginal_list = RNA_marginal,     n_cores = 2,     family_use = \"gaussian\",     new_covariate = NULL   )  METH_para <- extract_para(     sce = SCGEMMETH_sce,     marginal_list = METH_marginal,     n_cores = 2,     family_use = \"binomial\",     new_covariate = NULL   )"},{"path":"/articles/scDesign3-multiomics-vignette.html","id":"simulate-new-datasets","dir":"Articles","previous_headings":"Simulation","what":"Simulate New Datasets","title":"Simulate multi-omics data from single-omic data","text":", combined cell covariates scRNA-seq data DNA methylation data new covariate simulate two new datasets parameters scRNA-seq data DNA methylation data separately.","code":"RNA_res <- simu_new(     sce = SCGEMRNA_sce,     assay_use = \"logcounts\",     mean_mat = RNA_para$mean_mat,     sigma_mat = RNA_para$sigma_mat,     zero_mat = RNA_para$zero_mat,     quantile_mat = NULL,     copula_list = RNA_copula$copula_list,     n_cores = 2,     family_use = \"gaussian\",     input_data = RNA_data$dat,     new_covariate = rbind(RNA_data$dat, METH_data$dat),     important_feature = RNA_copula$important_feature   ) METH_res <- simu_new(     sce = SCGEMMETH_sce,     mean_mat = METH_para$mean_mat,     sigma_mat = METH_para$sigma_mat,     zero_mat = METH_para$zero_mat,     quantile_mat = NULL,     copula_list = METH_copula$copula_list,     n_cores = 2,     family_use = \"binomial\",     input_data = METH_data$dat,     new_covariate = rbind(RNA_data$dat, METH_data$dat),     important_feature = METH_copula$important_feature   )"},{"path":"/articles/scDesign3-multiomics-vignette.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Simulate multi-omics data from single-omic data","text":"combine two synthetic datasets obtain UMAP embeddings combined dataset. , reformat UMAP embeddings inputted scRNA-seq data, DNA methylation data, combined synthetic data visualize UMAP embeddings.","code":"count_combine <- rbind(RNA_res, METH_res) count_combine_pca <- irlba::prcomp_irlba(t(count_combine), 5)  count_combine_umap <- umap::umap(count_combine_pca$x, n_neighbors=30, min_dist=0.7)$layout colnames(count_combine_umap) <- c(\"UMAP1\", \"UMAP2\")  SCGEMNEW_sce <- SingleCellExperiment::SingleCellExperiment(list(logcounts = count_combine)) reducedDims(SCGEMNEW_sce) <- list(PCA = count_combine_pca$x, UMAP = count_combine_umap) SCGEMRNA_umap <- umap::umap(colData(SCGEMRNA_sce) %>% as_tibble() %>% dplyr::select(paste0(\"X\", 1:5)), n_neighbors=30, min_dist=0.7) SCGEMRNA_umap <- SCGEMRNA_umap$layout colnames(SCGEMRNA_umap) <- c(\"UMAP1\", \"UMAP2\") reducedDim(SCGEMRNA_sce, \"UMAP\") <- SCGEMRNA_umap SCGEMMETH_umap <- umap::umap(colData(SCGEMMETH_sce) %>% as_tibble() %>% dplyr::select(paste0(\"X\", 1:5)), n_neighbors=30, min_dist=0.7) SCGEMMETH_umap <- SCGEMMETH_umap$layout colnames(SCGEMMETH_umap) <- c(\"UMAP1\", \"UMAP2\") reducedDim(SCGEMMETH_sce, \"UMAP\") <- SCGEMMETH_umap dat_RNA <- SCGEMRNA_umap %>% as_tibble() %>% dplyr::mutate(Method = \"Real data: RNA\") dat_METH <- SCGEMMETH_umap %>% as_tibble() %>% dplyr::mutate(Method = \"Real data: Methylation\") dat_NEW <- reducedDim(SCGEMNEW_sce, \"UMAP\") %>% as_tibble() %>% dplyr::mutate(Method = \"scDesign3: RNA + Meythlation\") SCGEM_dat <- bind_rows(list(dat_RNA, dat_METH, dat_NEW)) design <- matrix(c(2,3,1,3), 2, 2) %>% t() dat_text_SCGEM <- tibble(Method = c(\"Real data: RNA\", \"Real data: Methylation\", \"scDesign3: RNA + Meythlation\"), label = c(\"32 Features*177 Cells\", \"27 Features*142 Cells\", \"59 Features*319 Cells\")) %>% as.data.frame() SCGEM_dat <- SCGEM_dat %>% dplyr::mutate(Method = factor(Method, levels = c(\"Real data: RNA\", \"scDesign3: RNA + Meythlation\", \"Real data: Methylation\"))) %>% dplyr::mutate(UMAP1 = if_else(Method == \"Real data: RNA\", -UMAP1, UMAP1), UMAP2 = if_else(Method == \"Real data: RNA\", -UMAP2, UMAP2))  p_merge_modals <- ggplot(SCGEM_dat, aes(UMAP1, UMAP2, colour = Method)) + ggrastr::rasterize(geom_point(size = 0.5), dpi = 300) +   guides(colour = \"none\") + scale_color_brewer(palette = \"Set2\") + theme_bw() + theme(aspect.ratio = 1,     panel.grid.minor = element_blank(),     panel.grid.major = element_blank(),     axis.text.x=element_blank(),     axis.ticks.x=element_blank(),     axis.text.y=element_blank(),     axis.ticks.y=element_blank()) + facet_manual(~Method, design = design, widths = c(1, 2), heights = c(1, 1), respect = TRUE, scales = \"free\")+ geom_text(   data    = dat_text_SCGEM,   mapping = aes(x = Inf, y = -Inf, label = label), vjust = -6, hjust = 1, color = \"black\", size = 3) p_merge_modals"},{"path":"/articles/scDesign3-multiomics-vignette.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Simulate multi-omics data from single-omic data","text":"","code":"sessionInfo() #> R version 4.2.2 Patched (2022-11-10 r83330) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] umap_0.2.9.0                ggh4x_0.2.3                 #>  [3] ggplot2_3.4.0               dplyr_1.0.10                #>  [5] SingleCellExperiment_1.20.0 SummarizedExperiment_1.28.0 #>  [7] Biobase_2.58.0              GenomicRanges_1.50.2        #>  [9] GenomeInfoDb_1.34.6         IRanges_2.32.0              #> [11] S4Vectors_0.36.1            BiocGenerics_0.44.0         #> [13] MatrixGenerics_1.10.0       matrixStats_0.63.0          #> [15] scDesign3_0.99.1            BiocStyle_2.24.0            #>  #> loaded via a namespace (and not attached): #>  [1] nlme_3.1-162           bitops_1.0-7           fs_1.5.2               #>  [4] RColorBrewer_1.1-3     rprojroot_2.0.3        tools_4.2.2            #>  [7] bslib_0.4.2            irlba_2.3.5.1          utf8_1.2.2             #> [10] R6_2.5.1               vipor_0.4.5            DBI_1.1.3              #> [13] mgcv_1.8-41            colorspace_2.0-3       withr_2.5.0            #> [16] ggrastr_1.0.1          tidyselect_1.2.0       compiler_4.2.2         #> [19] textshaping_0.3.6      cli_3.6.0              Cairo_1.6-0            #> [22] desc_1.4.2             DelayedArray_0.24.0    labeling_0.4.2         #> [25] bookdown_0.31          sass_0.4.4             scales_1.2.1           #> [28] gamlss_5.4-10          askpass_1.1            pkgdown_2.0.7          #> [31] systemfonts_1.0.4      stringr_1.5.0          digest_0.6.31          #> [34] rvinecopulib_0.6.2.1.3 rmarkdown_2.19         XVector_0.38.0         #> [37] pkgconfig_2.0.3        htmltools_0.5.4        highr_0.10             #> [40] fastmap_1.1.0          rlang_1.0.6            farver_2.1.1           #> [43] jquerylib_0.1.4        generics_0.1.3         gamlss.data_6.0-2      #> [46] jsonlite_1.8.4         mclust_6.0.0           RCurl_1.98-1.9         #> [49] magrittr_2.0.3         GenomeInfoDbData_1.2.9 Matrix_1.5-1           #> [52] ggbeeswarm_0.7.1       Rcpp_1.0.9             munsell_0.5.0          #> [55] fansi_1.0.3            reticulate_1.27        lifecycle_1.0.3        #> [58] stringi_1.7.12         yaml_2.3.6             MASS_7.3-58.2          #> [61] zlibbioc_1.44.0        gamlss.dist_6.0-5      grid_4.2.2             #> [64] parallel_4.2.2         lattice_0.20-45        splines_4.2.2          #> [67] kde1d_1.0.5            knitr_1.41             pillar_1.8.1           #> [70] randtoolbox_2.0.3      glue_1.6.2             evaluate_0.19          #> [73] BiocManager_1.30.19    vctrs_0.5.1            png_0.1-8              #> [76] gtable_0.3.1           openssl_2.0.5          purrr_1.0.1            #> [79] assertthat_0.2.1       cachem_1.0.6           xfun_0.36              #> [82] rngWELL_0.10-8         RSpectra_0.16-1        ragg_1.2.5             #> [85] survival_3.5-3         tibble_3.1.8           beeswarm_0.4.0         #> [88] memoise_2.0.1"},{"path":"/articles/scDesign3-multipleLineages-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulate datasets with multiple lineages","text":"tutorial, show use scDesign3 simulate multiple lineages single-cell data.","code":""},{"path":"/articles/scDesign3-multipleLineages-vignette.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"Simulate datasets with multiple lineages","text":"raw data GEO ID GSE72859, describes myeloid progenitors mouse bone marrow. pre-select top 1000 highly variable genes. save computational time, use top 100 genes. can see, example dataset two sets pseudotime, thus two lineages. variables pseudotime1 pseudotime2 contain corresponding pseudotime cell. variables l1 l2 indicate whether particular cell belong first /second lineages.","code":"example_sce <- readRDS((url(\"https://www.dropbox.com/sh/0tptrft7hsstpi3/AAADW7is80WscU5RwavChsdUa/MARROW_sce.rds?raw=1\"))) print(example_sce) #> class: SingleCellExperiment  #> dim: 1000 2660  #> metadata(0): #> assays(3): counts cpm logcounts #> rownames(1000): Prtn3 Elane ... Rnf144a Fabp5 #> rowData names(1): gene_short_name #> colnames(2660): W31105 W31106 ... W39167 W39168 #> colData names(27): Seq_batch_ID Amp_batch_ID ... l1 l2 #> reducedDimNames(1): UMAP #> mainExpName: NULL #> altExpNames(0): example_sce <- example_sce[1:100, ] head(colData(example_sce))[,c(\"pseudotime1\",\"pseudotime2\",\"l1\",\"l2\")] #> DataFrame with 6 rows and 4 columns #>        pseudotime1 pseudotime2       l1       l2 #>          <numeric>   <numeric> <factor> <factor> #> W31105    0.950862    0.568357    TRUE     TRUE  #> W31106    9.168276   -1.000000    TRUE     FALSE #> W31107   -1.000000    7.981990    FALSE    TRUE  #> W31108   11.394132   -1.000000    TRUE     FALSE #> W31109   -1.000000    8.080133    FALSE    TRUE  #> W31110   11.398502   -1.000000    TRUE     FALSE"},{"path":"/articles/scDesign3-multipleLineages-vignette.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Simulate datasets with multiple lineages","text":", can use multiple-lineage dataset generate new data setting parameter mu_formula two smooth terms lineage. , can create SinglecellExperiment object using synthetic count matrix store logcounts input synthetic SinglecellExperiment objects.","code":"set.seed(123) example_simu <- scdesign3(     sce = example_sce,     assay_use = \"counts\",     celltype = \"cell_type\",     pseudotime = c(\"pseudotime1\", \"pseudotime2\", \"l1\", \"l2\"),     spatial = NULL,     other_covariates = NULL,     mu_formula = \"s(pseudotime1, k = 10, by = l1, bs = 'cr') + s(pseudotime2, k = 10, by = l2, bs = 'cr')\",     sigma_formula = \"1\",     family_use = \"nb\",     n_cores = 2,     usebam = FALSE,     corr_formula = \"1\",     copula = \"gaussian\",     DT = TRUE,     pseudo_obs = FALSE,     return_model = FALSE,     nonzerovar = FALSE   ) logcounts(example_sce) <- log1p(counts(example_sce)) simu_sce <- example_sce counts(simu_sce) <- example_simu$new_count logcounts(simu_sce) <- log1p(counts(simu_sce))"},{"path":"/articles/scDesign3-multipleLineages-vignette.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Simulate datasets with multiple lineages","text":"","code":"compare_figure <- plot_reduceddim(ref_sce = example_sce,                                    sce_list = list(simu_sce),                                    name_vec = c(\"Reference\", \"scDesign3\"),                                   assay_use = \"logcounts\",                                    if_plot = TRUE,                                    color_by =  \"pseudotime1\",                                   n_pc = 20) compare_figure2 <- plot_reduceddim(ref_sce = example_sce,                                    sce_list = list(simu_sce),                                    name_vec = c(\"Reference\", \"scDesign3\"),                                   assay_use = \"logcounts\",                                    if_plot = TRUE,                                    color_by =  \"pseudotime2\",                                    n_pc = 20) grid.arrange(compare_figure$p_umap, compare_figure2$p_umap)"},{"path":"/articles/scDesign3-multipleLineages-vignette.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Simulate datasets with multiple lineages","text":"","code":"sessionInfo() #> R version 4.2.2 Patched (2022-11-10 r83330) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] gridExtra_2.3               useful_1.2.6                #>  [3] ggplot2_3.4.0               SingleCellExperiment_1.20.0 #>  [5] SummarizedExperiment_1.28.0 Biobase_2.58.0              #>  [7] GenomicRanges_1.50.2        GenomeInfoDb_1.34.6         #>  [9] IRanges_2.32.0              S4Vectors_0.36.1            #> [11] BiocGenerics_0.44.0         MatrixGenerics_1.10.0       #> [13] matrixStats_0.63.0          scDesign3_0.99.1            #> [15] BiocStyle_2.24.0            #>  #> loaded via a namespace (and not attached): #>  [1] nlme_3.1-162           bitops_1.0-7           fs_1.5.2               #>  [4] rprojroot_2.0.3        tools_4.2.2            bslib_0.4.2            #>  [7] utf8_1.2.2             R6_2.5.1               irlba_2.3.5.1          #> [10] DBI_1.1.3              mgcv_1.8-41            colorspace_2.0-3       #> [13] withr_2.5.0            tidyselect_1.2.0       compiler_4.2.2         #> [16] textshaping_0.3.6      cli_3.6.0              desc_1.4.2             #> [19] DelayedArray_0.24.0    labeling_0.4.2         bookdown_0.31          #> [22] sass_0.4.4             scales_1.2.1           mvtnorm_1.1-3          #> [25] gamlss_5.4-10          askpass_1.1            pkgdown_2.0.7          #> [28] systemfonts_1.0.4      stringr_1.5.0          digest_0.6.31          #> [31] rmarkdown_2.19         XVector_0.38.0         pkgconfig_2.0.3        #> [34] htmltools_0.5.4        umap_0.2.9.0           highr_0.10             #> [37] fastmap_1.1.0          rlang_1.0.6            farver_2.1.1           #> [40] jquerylib_0.1.4        generics_0.1.3         gamlss.data_6.0-2      #> [43] jsonlite_1.8.4         mclust_6.0.0           dplyr_1.0.10           #> [46] RCurl_1.98-1.9         magrittr_2.0.3         GenomeInfoDbData_1.2.9 #> [49] Matrix_1.5-1           Rcpp_1.0.9             munsell_0.5.0          #> [52] fansi_1.0.3            viridis_0.6.2          reticulate_1.27        #> [55] lifecycle_1.0.3        stringi_1.7.12         yaml_2.3.6             #> [58] MASS_7.3-58.2          zlibbioc_1.44.0        gamlss.dist_6.0-5      #> [61] plyr_1.8.8             grid_4.2.2             parallel_4.2.2         #> [64] lattice_0.20-45        splines_4.2.2          knitr_1.41             #> [67] pillar_1.8.1           glue_1.6.2             evaluate_0.19          #> [70] BiocManager_1.30.19    png_0.1-8              vctrs_0.5.1            #> [73] gtable_0.3.1           openssl_2.0.5          purrr_1.0.1            #> [76] assertthat_0.2.1       cachem_1.0.6           xfun_0.36              #> [79] RSpectra_0.16-1        viridisLite_0.4.1      ragg_1.2.5             #> [82] survival_3.5-3         tibble_3.1.8           memoise_2.0.1"},{"path":"/articles/scDesign3-pseudotimeGOF-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Evaluate pseudotime goodness-of-fit by scDesign3","text":"tutorial, show use scDesign3 evaluate pseudotime goodness--fit different pseudotime labels. true labels unavailable little prior knowledge, scDesign3 BIC can serve unsupervised metric. tutorial, first use R package dyngen generate dataset ground truth \"pseudotime\". , perturb ground truth pseudotime worsen quality use scDesign3’s BIC examine pseudotime goodness--fit.","code":""},{"path":"/articles/scDesign3-pseudotimeGOF-vignette.html","id":"generation-of-reference-dataset-simulation","dir":"Articles","previous_headings":"","what":"Generation of reference dataset & Simulation","title":"Evaluate pseudotime goodness-of-fit by scDesign3","text":"first use dyngen generate dataset ground truth “pseudotime”. Secondly, perturb pseudotime generating random numbers uniform distribution replace various percentage original pseudotime random numbers. percentage ranges 0% 100%. Thirdly, run function scdesign3 datasets perturbed pseudotime.","code":"set.seed(123) backbone <- backbone_linear_simple() config <-   initialise_model(     backbone = backbone,     num_cells = 500,     num_tfs = nrow(backbone$module_info),     num_targets = 100,     num_hks = 50,     verbose = FALSE   ) out <- generate_dataset(   config,   format = \"sce\",   make_plots = FALSE   ) example_sce <- out$dataset colData(example_sce)$pseudotime <- out$model$experiment$cell_info$time example_sce_list <- lapply(0:10, function(x) {   perturb_prop <- x/10   n_cell <- round(dim(example_sce)[2]*perturb_prop)   cell_index <- sample(1:dim(example_sce)[2], n_cell)      new_pseudotime <- colData(example_sce)$pseudotime   new_pseudotime[cell_index] <- runif(n_cell)      curr_sce <- example_sce   colData(curr_sce)$pseudotime <- new_pseudotime   curr_sce }) scDesign3_result <- lapply(example_sce_list, function(x) {   res <-  scdesign3(     sce = x,     assay_use = \"counts\",     celltype = NULL,     pseudotime = \"pseudotime\",     spatial = NULL,     other_covariates = NULL,     mu_formula = \"s(pseudotime, bs = 'cr', k = 10)\",     sigma_formula = \"1\",     corr_formula = \"ind\",     copula = \"gaussian\",     n_cores = 2   )   return(res) })"},{"path":"/articles/scDesign3-pseudotimeGOF-vignette.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Evaluate pseudotime goodness-of-fit by scDesign3","text":"simulation, can plot BIC values function scdesign3 vs calculated \\(r^2\\) original pseudotime perturbed pseudotime.","code":"bic_list <- lapply(scDesign3_result, function(x){return(x$model_bic)}) bic_df <- data.frame(matrix(unlist(bic_list), nrow = length(bic_list), byrow = TRUE)) colnames(bic_df) <- names(bic_list[[1]]) r2 <- sapply(example_sce_list, function(x){   cor(colData(example_sce_list[[1]])$pseudotime, colData(x)$pseudotime)^2 }) metric <- tibble(bic = bic_df$bic.marginal, r2 = r2, Method = paste0(\"perturb \",seq(0,100,by = 10), \"%\")) p_pseudotime_metric <- metric %>% ggplot(aes(x = r2, y = bic,label = Method)) + geom_point() + theme_bw() + theme(aspect.ratio = 1,     panel.grid.minor = element_blank(),     panel.grid.major = element_blank()) + ggpubr::stat_cor(method = \"spearman\", cor.coef.name = \"rho\", label.x.npc = \"left\", label.y.npc = 0.5) + ylab(\"scDesign3 BIC\") + xlab(\"R2 (truth vs pseudotime)\") p_pseudotime_metric"},{"path":"/articles/scDesign3-pseudotimeGOF-vignette.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Evaluate pseudotime goodness-of-fit by scDesign3","text":"","code":"sessionInfo() #> R version 4.2.2 Patched (2022-11-10 r83330) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] dplyr_1.0.10                ggplot2_3.4.0               #>  [3] SingleCellExperiment_1.20.0 SummarizedExperiment_1.28.0 #>  [5] Biobase_2.58.0              GenomicRanges_1.50.2        #>  [7] GenomeInfoDb_1.34.6         IRanges_2.32.0              #>  [9] S4Vectors_0.36.1            BiocGenerics_0.44.0         #> [11] MatrixGenerics_1.10.0       matrixStats_0.63.0          #> [13] dyngen_1.0.5                scDesign3_0.99.1            #> [15] BiocStyle_2.24.0            #>  #> loaded via a namespace (and not attached): #>   [1] colorspace_2.0-3       ggsignif_0.6.4         ellipsis_0.3.2         #>   [4] mclust_6.0.0           rprojroot_2.0.3        XVector_0.38.0         #>   [7] fs_1.5.2               ggpubr_0.5.0           farver_2.1.1           #>  [10] remotes_2.4.2          graphlayouts_0.8.4     dynutils_1.0.11        #>  [13] ggrepel_0.9.2          fansi_1.0.3            codetools_0.2-19       #>  [16] splines_4.2.2          cachem_1.0.6           knitr_1.41             #>  [19] polyclip_1.10-4        jsonlite_1.8.4         broom_1.0.2            #>  [22] gamlss.dist_6.0-5      ggforce_0.4.1          BiocManager_1.30.19    #>  [25] readr_2.1.3            compiler_4.2.2         backports_1.4.1        #>  [28] assertthat_0.2.1       Matrix_1.5-1           fastmap_1.1.0          #>  [31] cli_3.6.0              tweenr_2.0.2           htmltools_0.5.4        #>  [34] tools_4.2.2            igraph_1.3.5           gtable_0.3.1           #>  [37] glue_1.6.2             GenomeInfoDbData_1.2.9 Rcpp_1.0.9             #>  [40] carData_3.0-5          jquerylib_0.1.4        pkgdown_2.0.7          #>  [43] vctrs_0.5.1            nlme_3.1-162           RcppXPtrUtils_0.1.2    #>  [46] ggraph_2.1.0           xfun_0.36              stringr_1.5.0          #>  [49] lifecycle_1.0.3        irlba_2.3.5.1          rstatix_0.7.1          #>  [52] MASS_7.3-58.2          zlibbioc_1.44.0        scales_1.2.1           #>  [55] tidygraph_1.2.2        ragg_1.2.5             hms_1.1.2              #>  [58] parallel_4.2.2         gamlss.data_6.0-2      GillespieSSA2_0.2.10   #>  [61] yaml_2.3.6             memoise_2.0.1          pbapply_1.7-0          #>  [64] gridExtra_2.3          sass_0.4.4             stringi_1.7.12         #>  [67] highr_0.10             desc_1.4.2             rlang_1.0.6            #>  [70] pkgconfig_2.0.3        systemfonts_1.0.4      bitops_1.0-7           #>  [73] evaluate_0.19          lattice_0.20-45        purrr_1.0.1            #>  [76] labeling_0.4.2         patchwork_1.1.2        tidyselect_1.2.0       #>  [79] magrittr_2.0.3         bookdown_0.31          R6_2.5.1               #>  [82] generics_0.1.3         DelayedArray_0.24.0    DBI_1.1.3              #>  [85] mgcv_1.8-41            pillar_1.8.1           withr_2.5.0            #>  [88] proxyC_0.3.3           abind_1.4-5            survival_3.5-3         #>  [91] RCurl_1.98-1.9         tibble_3.1.8           car_3.1-1              #>  [94] crayon_1.5.2           lmds_0.1.0             gamlss_5.4-10          #>  [97] utf8_1.2.2             tzdb_0.3.0             rmarkdown_2.19         #> [100] viridis_0.6.2          grid_4.2.2             digest_0.6.31          #> [103] tidyr_1.2.1            textshaping_0.3.6      RcppParallel_5.1.6     #> [106] munsell_0.5.0          viridisLite_0.4.1      bslib_0.4.2"},{"path":"/articles/scDesign3-scATACseq-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulate single-cell ATAC-seq data","text":"tutorial, show use scDesign3 simulate peak cell matrix scATAC-seq data.","code":""},{"path":"/articles/scDesign3-scATACseq-vignette.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"Simulate single-cell ATAC-seq data","text":"raw data Signac, human peripheral blood mononuclear cells (PBMCs) provided 10x Genomics. pre-select differentially accessible peaks clusters. save time, subset 1000 cells.","code":"example_sce <- readRDS((url(\"https://www.dropbox.com/s/e75uf5k5voni106/ATAC_sce.rds?raw=1\"))) print(example_sce) #> class: SingleCellExperiment  #> dim: 1133 7034  #> metadata(0): #> assays(2): counts logcounts #> rownames(1133): chr6-44025105-44028184 chr2-113581628-113594911 ... #>   chr2-233174300-233175622 chr3-13015237-13015864 #> rowData names(0): #> colnames(7034): AAACGAAAGAGCGAAA-1 AAACGAAAGAGTTTGA-1 ... #>   TTTGTGTTCTACTTTG-1 TTTGTGTTCTTGTGCC-1 #> colData names(31): orig.ident nCount_peaks ... ident cell_type #> reducedDimNames(2): LSI UMAP #> mainExpName: peaks #> altExpNames(0): set.seed(123) example_sce <- example_sce[, sample(seq_len(dim(example_sce)[2]), 1000, replace = FALSE)]"},{"path":"/articles/scDesign3-scATACseq-vignette.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Simulate single-cell ATAC-seq data","text":"choose Zero-inflated Poisson (ZIP) distribution due good empirical performance. Users may explore distributions (Poisson, NB, ZINB) since conclusion best distribution ATAC-seq. also run TF-IDF transformation.","code":"set.seed(123) example_simu <- scdesign3(     sce = example_sce,     assay_use = \"counts\",     celltype = \"cell_type\",     pseudotime = NULL,     spatial = NULL,     other_covariates = NULL,     mu_formula = \"cell_type\",     sigma_formula = \"1\",     family_use = \"zip\",     n_cores = 2,     usebam = FALSE,     corr_formula = \"cell_type\",     copula = \"gaussian\",     DT = TRUE,     pseudo_obs = FALSE,     return_model = FALSE,     nonzerovar = FALSE   ) tf_idf <- function(Y){   frequences <- colSums(Y)   nfreqs <- t(apply(Y, 1, function(x){x/frequences}))   nfreqs[is.na(nfreqs)] <- 0   idf <- log(1 + ncol(Y)) - log(rowSums(Y > 0) + 1) + 1   Y_idf <- apply(nfreqs, 2, function(x){x * idf})   return(Y_idf) } assay(example_sce, \"tfidf\") <- as.matrix(tf_idf(counts(example_sce))) simu_sce <- example_sce counts(simu_sce) <- example_simu$new_count assay(simu_sce, \"tfidf\") <- as.matrix(tf_idf(counts(simu_sce)))"},{"path":"/articles/scDesign3-scATACseq-vignette.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Simulate single-cell ATAC-seq data","text":"","code":"compare_figure <- plot_reduceddim(ref_sce = example_sce,                                   sce_list = list(simu_sce),                                   name_vec = c(\"Reference\", \"scDesign3\"),                                   assay_use = \"tfidf\",                                   if_plot = TRUE,                                   color_by = \"cell_type\",                                   n_pc = 20) plot(compare_figure$p_umap)"},{"path":"/articles/scDesign3-scATACseq-vignette.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Simulate single-cell ATAC-seq data","text":"","code":"sessionInfo() #> R version 4.2.2 Patched (2022-11-10 r83330) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] ggplot2_3.4.0               SingleCellExperiment_1.20.0 #>  [3] SummarizedExperiment_1.28.0 Biobase_2.58.0              #>  [5] GenomicRanges_1.50.2        GenomeInfoDb_1.34.6         #>  [7] IRanges_2.32.0              S4Vectors_0.36.1            #>  [9] BiocGenerics_0.44.0         MatrixGenerics_1.10.0       #> [11] matrixStats_0.63.0          scDesign3_0.99.1            #> [13] BiocStyle_2.24.0            #>  #> loaded via a namespace (and not attached): #>  [1] nlme_3.1-162           bitops_1.0-7           fs_1.5.2               #>  [4] rprojroot_2.0.3        tools_4.2.2            bslib_0.4.2            #>  [7] utf8_1.2.2             R6_2.5.1               irlba_2.3.5.1          #> [10] DBI_1.1.3              mgcv_1.8-41            colorspace_2.0-3       #> [13] withr_2.5.0            tidyselect_1.2.0       compiler_4.2.2         #> [16] textshaping_0.3.6      cli_3.6.0              desc_1.4.2             #> [19] DelayedArray_0.24.0    labeling_0.4.2         bookdown_0.31          #> [22] sass_0.4.4             scales_1.2.1           mvtnorm_1.1-3          #> [25] gamlss_5.4-10          askpass_1.1            pkgdown_2.0.7          #> [28] systemfonts_1.0.4      stringr_1.5.0          digest_0.6.31          #> [31] rmarkdown_2.19         XVector_0.38.0         pkgconfig_2.0.3        #> [34] htmltools_0.5.4        umap_0.2.9.0           highr_0.10             #> [37] fastmap_1.1.0          rlang_1.0.6            jquerylib_0.1.4        #> [40] generics_0.1.3         farver_2.1.1           gamlss.data_6.0-2      #> [43] jsonlite_1.8.4         mclust_6.0.0           dplyr_1.0.10           #> [46] RCurl_1.98-1.9         magrittr_2.0.3         GenomeInfoDbData_1.2.9 #> [49] Matrix_1.5-1           Rcpp_1.0.9             munsell_0.5.0          #> [52] fansi_1.0.3            reticulate_1.27        lifecycle_1.0.3        #> [55] stringi_1.7.12         yaml_2.3.6             MASS_7.3-58.2          #> [58] zlibbioc_1.44.0        gamlss.dist_6.0-5      grid_4.2.2             #> [61] parallel_4.2.2         lattice_0.20-45        splines_4.2.2          #> [64] knitr_1.41             pillar_1.8.1           glue_1.6.2             #> [67] evaluate_0.19          BiocManager_1.30.19    vctrs_0.5.1            #> [70] png_0.1-8              gtable_0.3.1           openssl_2.0.5          #> [73] purrr_1.0.1            assertthat_0.2.1       cachem_1.0.6           #> [76] xfun_0.36              RSpectra_0.16-1        ragg_1.2.5             #> [79] survival_3.5-3         tibble_3.1.8           memoise_2.0.1"},{"path":"/articles/scDesign3-spatial-deconvolution.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulate spot-resolution spatial data for cell-type deconvolution","text":"tutorial, show use scDesign3 simulate spot-resolution spatial data, spot mix cells different cell types.","code":""},{"path":"/articles/scDesign3-spatial-deconvolution.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"Simulate spot-resolution spatial data for cell-type deconvolution","text":"paired scRNA-seq spatial data used CARD. pre-select top cell-type marker genes.","code":"MOBSC_sce <- readRDS((url(\"https://www.dropbox.com/s/650bsdt2gmkcvs5/MOBSC_sce.rds?raw=1\"))) MOBSP_sce <- readRDS((url(\"https://www.dropbox.com/s/czvptdt4vzi7q9m/MOBSP_sce.rds?raw=1\"))) print(MOBSC_sce) #> class: SingleCellExperiment  #> dim: 182 12640  #> metadata(0): #> assays(2): counts logcounts #> rownames(182): Grin2b Prkca ... Zic1 Tpi1 #> rowData names(1): rownames.count. #> colnames(12640): WT1_AAACCTGAGCTGCGAA WT1_AAACCTGGTTTGGCGC ... #>   OC2_TAGTTGGTCGCGATCG OC2_TTGCGTCAGGATCGCA #> colData names(4): cellType sampleInfo sizeFactor cell_type #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): print(MOBSP_sce) #> class: SingleCellExperiment  #> dim: 182 278  #> metadata(0): #> assays(1): counts #> rownames(182): Grin2b Prkca ... Zic1 Tpi1 #> rowData names(0): #> colnames(278): 16.918x16.996 18.017x17.034 ... 25.134x28.934 #>   29.961x18.97 #> colData names(2): spatial1 spatial2 #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): cell_type <- unique(colData(MOBSC_sce)$cellType)"},{"path":"/articles/scDesign3-spatial-deconvolution.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Simulate spot-resolution spatial data for cell-type deconvolution","text":"first use scDesign3 estimate cell-type reference scRNA-seq data. Now get fitted models scRNA-seq spatial data. need extract mean parameters (.e., expected expression values). use CIBERSORT decompose spot’s expected expression cell-type proportions. step set true cell-type proportions. Please note can also use decomposition methods set proportion mannully design. can visualzie proportions pie-chart.  can simulate new spatial data spot sum 50 cells/5 (therefore average 10 cells per spot). Increasing number cells make spatial data smoother (closer expected spatial expression). Finally, can check simulated results. use four cell-type marker genes example.","code":"MOBSC_data <- construct_data(   sce = MOBSC_sce,   assay_use = \"counts\",   celltype = \"cell_type\",   pseudotime = NULL,   spatial = NULL,   other_covariates = NULL,   corr_by = \"1\" )  MOBSC_marginal <- fit_marginal(   data = MOBSC_data,   predictor = \"gene\",   mu_formula = \"cell_type\",   sigma_formula = \"cell_type\",   family_use = \"nb\",   n_cores = 2,   usebam = FALSE,   parallelization = \"pbmcmapply\"  )  MOBSC_copula <- fit_copula(   sce = MOBSC_sce,   assay_use = \"counts\",   marginal_list = MOBSC_marginal,   family_use = \"nb\",   copula = \"gaussian\",   n_cores = 2,   new_covariate = NULL,   input_data = MOBSC_data$dat )  MOBSC_para <- extract_para(   sce = MOBSC_sce,   marginal_list = MOBSC_marginal,   n_cores = 2,   family_use = \"nb\",   new_covariate = NULL )  MOBSC_newcount <- simu_new(   sce = MOBSC_sce,   mean_mat = MOBSC_para$mean_mat,   sigma_mat = MOBSC_para$sigma_mat,   zero_mat = MOBSC_para$zero_mat,   quantile_mat = NULL,   copula_list = MOBSC_copula$copula_list,   n_cores = 2,   family_use = \"nb\",   input_data = MOBSC_data$dat,   new_covariate = MOBSC_data$newCovariate ) MOBSP_data <- construct_data(   sce = MOBSP_sce,   assay_use = \"counts\",   celltype = NULL,   pseudotime = NULL,   spatial = c(\"spatial1\", \"spatial2\"),   other_covariates = NULL,   corr_by = \"1\" )  MOBSP_marginal <- fit_marginal(   data = MOBSP_data,   predictor = \"gene\",   mu_formula = \"s(spatial1, spatial2, bs = 'gp', k = 50, m = c(1, 2, 1))\",   sigma_formula = \"1\",   family_use = \"nb\",   n_cores = 2,   usebam = FALSE,    parallelization = \"pbmcmapply\"    )  MOBSP_copula <- fit_copula(   sce = MOBSP_sce,   assay_use = \"counts\",   marginal_list = MOBSP_marginal,   family_use = \"nb\",   copula = \"gaussian\",   n_cores = 2,   new_covariate = NULL,   input_data = MOBSP_data$dat )  MOBSP_para <- extract_para(   sce = MOBSP_sce,   marginal_list = MOBSP_marginal,   n_cores = 2,   family_use = \"nb\",   new_covariate = NULL ) MOBSC_sig_matrix <- sapply(cell_type, function(x) {   rowMeans(t(MOBSC_para$mean_mat)[, colData(MOBSC_sce)$cellType %in% x]) })  MOBSP_matrix <- (t(MOBSP_para$mean_mat)) sig_matrix <- as.data.frame(MOBSC_sig_matrix) mixture_file <- as.data.frame(MOBSP_matrix)  proportion_mat <- IOBR::CIBERSORT(sig_matrix, mixture_file, QN = FALSE, absolute = FALSE, perm = 10) proportion_mat <- proportion_mat[, 1:4] colors_cell_type <- c(\"#E69F00\", \"#56B4E9\", \"#009E73\",                         \"#0072B2\") d_pie <- as_tibble(colData(MOBSP_sce), rownames = \"cell\") %>% bind_cols(as_tibble(proportion_mat)) %>% dplyr::mutate(region = seq_len(dim(MOBSP_sce)[2])) %>% dplyr::mutate(X= spatial1, Y = spatial2)  p_pie_plot <- ggplot() + geom_scatterpie(aes(x=X, y=Y, group=region), data=d_pie ,                            cols = cell_type, color=NA) + coord_fixed(ratio = 1) +                                  scale_fill_manual(values = colors_cell_type) + coord_equal()+ theme_bw() + theme(legend.position = \"left\")  + theme(     panel.grid.minor = element_blank(),     panel.grid.major = element_blank(),     axis.text.x=element_blank(),     axis.ticks.x=element_blank(),     axis.text.y=element_blank(),     axis.ticks.y=element_blank())+ guides(fill=guide_legend(title=\"Cell type\")) p_pie_plot set.seed(123) MOBSCSIM_sce <- MOBSC_sce counts(MOBSCSIM_sce) <- MOBSC_newcount  MOBSP_new_mixture <- (apply(proportion_mat, 1, function(x) {   n = 50   rowSums(sapply(cell_type, function(y) {     index <- sample(which(colData(MOBSCSIM_sce)$cell_type==y), size = n, replace = FALSE)     rowSums(MOBSC_newcount[, index])*x[y]   })) }))  MOBSP_new_mixture <- MOBSP_new_mixture/5  ### Ceiling to integer MOBSP_new_mixture <- ceiling(MOBSP_new_mixture)  MOBSPMIX_sce <- MOBSP_sce counts(MOBSPMIX_sce) <- as.matrix(MOBSP_new_mixture) MOBSC_sig_matrix <- sapply(cell_type, function(x) {   rowMeans(t(MOBSC_para$mean_mat)[, colData(MOBSC_sce)$cellType %in% x]) }) MOBSP_sc_mixture <- tcrossprod(as.matrix(MOBSC_sig_matrix), as.matrix(proportion_mat))  rownames(MOBSP_sc_mixture) <- rownames(MOBSP_new_mixture)  location <- colData(MOBSP_sce) MOBSP_real_tbl <- as_tibble(t(log1p(counts(MOBSP_sce)))) %>% dplyr::mutate(X = location$spatial1,                                              Y = location$spatial2) %>%   tidyr::pivot_longer(-c(\"X\", \"Y\"), names_to = \"Gene\", values_to = \"Expression\") %>% dplyr::mutate(Method = \"Real data\")  MOBSP_real_tbl <- transform(MOBSP_real_tbl, Expression=ave(Expression, Gene, FUN=scales::rescale))   MOBSP_mixture_tbl <- as_tibble(t(log1p(MOBSP_new_mixture))) %>% dplyr::mutate(X = location$spatial1,                                              Y = location$spatial2) %>%   tidyr::pivot_longer(-c(\"X\", \"Y\"), names_to = \"Gene\", values_to = \"Expression\") %>% dplyr::mutate(Method = \"scDesign3\")  MOBSP_mixture_tbl <- transform(MOBSP_mixture_tbl, Expression=ave(Expression, Gene, FUN=scales::rescale))  MOBSP_tbl <- bind_rows(list(MOBSP_real_tbl, MOBSP_mixture_tbl))  MOBSC_marker <- c(\"Penk\", \"Apold1\", \"Cdhr1\", \"S100a5\")  p_MOB_prop <- MOBSP_tbl %>% dplyr::filter(Gene %in% MOBSC_marker) %>% dplyr::mutate(Gene = factor(Gene, levels = MOBSC_marker)) %>% ggplot(aes(x = X, y = Y, color = Expression))  + ggrastr::rasterize(geom_point(size = 1), dpi = 300) + scale_colour_gradientn(colors = viridis_pal(option = \"B\", direction = -1)(10), limits=c(0, 1)) + coord_fixed(ratio = 1) + facet_grid(Method ~ Gene ) + theme_bw() + theme(legend.position = \"right\")  + theme(     panel.grid.minor = element_blank(),     panel.grid.major = element_blank(),     axis.text.x=element_blank(),     axis.ticks.x=element_blank(),     axis.text.y=element_blank(),     axis.ticks.y=element_blank()) p_MOB_prop"},{"path":"/articles/scDesign3-spatial-deconvolution.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Simulate spot-resolution spatial data for cell-type deconvolution","text":"","code":"sessionInfo() #> R version 4.2.2 Patched (2022-11-10 r83330) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] grid      stats4    stats     graphics  grDevices utils     datasets  #> [8] methods   base      #>  #> other attached packages: #>  [1] scatterpie_0.1.8            IOBR_0.99.9                 #>  [3] tidyHeatmap_1.8.1           ComplexHeatmap_2.12.1       #>  [5] survival_3.5-3              ggpubr_0.5.0                #>  [7] tibble_3.1.8                viridis_0.6.2               #>  [9] viridisLite_0.4.1           dplyr_1.0.10                #> [11] ggplot2_3.4.0               SingleCellExperiment_1.20.0 #> [13] SummarizedExperiment_1.28.0 Biobase_2.58.0              #> [15] GenomicRanges_1.50.2        GenomeInfoDb_1.34.6         #> [17] IRanges_2.32.0              S4Vectors_0.36.1            #> [19] BiocGenerics_0.44.0         MatrixGenerics_1.10.0       #> [21] matrixStats_0.63.0          scDesign3_0.99.1            #> [23] BiocStyle_2.24.0            #>  #> loaded via a namespace (and not attached): #>   [1] ragg_1.2.5                tidyr_1.2.1               #>   [3] bit64_4.0.5               knitr_1.41                #>   [5] irlba_2.3.5.1             DelayedArray_0.24.0       #>   [7] data.table_1.14.6         KEGGREST_1.36.3           #>   [9] RCurl_1.98-1.9            doParallel_1.0.17         #>  [11] generics_0.1.3            preprocessCore_1.58.0     #>  [13] ScaledMatrix_1.4.1        cowplot_1.1.1             #>  [15] RSQLite_2.2.20            proxy_0.4-27              #>  [17] bit_4.0.5                 tzdb_0.3.0                #>  [19] xml2_1.3.3                lubridate_1.9.0           #>  [21] assertthat_0.2.1          tidyverse_1.3.2           #>  [23] gargle_1.2.1              xfun_0.36                 #>  [25] hms_1.1.2                 jquerylib_0.1.4           #>  [27] evaluate_0.19             fansi_1.0.3               #>  [29] dendextend_1.17.1         dbplyr_2.2.1              #>  [31] readxl_1.4.1              km.ci_0.5-6               #>  [33] DBI_1.1.3                 geneplotter_1.74.0        #>  [35] googledrive_2.0.0         purrr_1.0.1               #>  [37] ellipsis_0.3.2            corrplot_0.92             #>  [39] backports_1.4.1           bookdown_0.31             #>  [41] annotate_1.74.0           sparseMatrixStats_1.10.0  #>  [43] vctrs_0.5.1               Cairo_1.6-0               #>  [45] abind_1.4-5               cachem_1.0.6              #>  [47] withr_2.5.0               ggforce_0.4.1             #>  [49] gamlss_5.4-10             mclust_6.0.0              #>  [51] cluster_2.1.4             crayon_1.5.2              #>  [53] genefilter_1.78.0         glmnet_4.1-6              #>  [55] pkgconfig_2.0.3           labeling_0.4.2            #>  [57] tweenr_2.0.2              vipor_0.4.5               #>  [59] nlme_3.1-162              rlang_1.0.6               #>  [61] lifecycle_1.0.3           gamlss.data_6.0-2         #>  [63] modelr_0.1.10             rsvd_1.0.5                #>  [65] ggrastr_1.0.1             cellranger_1.1.0          #>  [67] rprojroot_2.0.3           polyclip_1.10-4           #>  [69] GSVA_1.44.5               graph_1.74.0              #>  [71] Matrix_1.5-1              KMsurv_0.1-5              #>  [73] carData_3.0-5             Rhdf5lib_1.20.0           #>  [75] zoo_1.8-11                reprex_2.0.2              #>  [77] beeswarm_0.4.0            GlobalOptions_0.1.2       #>  [79] googlesheets4_1.0.1       png_0.1-8                 #>  [81] rjson_0.2.21              bitops_1.0-7              #>  [83] rhdf5filters_1.10.0       Biostrings_2.64.1         #>  [85] blob_1.2.3                DelayedMatrixStats_1.20.0 #>  [87] shape_1.4.6               stringr_1.5.0             #>  [89] readr_2.1.3               rstatix_0.7.1             #>  [91] ggsignif_0.6.4            beachmat_2.14.0           #>  [93] scales_1.2.1              lpSolve_5.6.18            #>  [95] memoise_2.0.1             GSEABase_1.58.0           #>  [97] magrittr_2.0.3            zlibbioc_1.44.0           #>  [99] compiler_4.2.2            RColorBrewer_1.1-3        #> [101] clue_0.3-63               DESeq2_1.36.0             #> [103] cli_3.6.0                 XVector_0.38.0            #> [105] patchwork_1.1.2           MASS_7.3-58.2             #> [107] mgcv_1.8-41               limSolve_1.5.6            #> [109] tidyselect_1.2.0          stringi_1.7.12            #> [111] forcats_0.5.2             textshaping_0.3.6         #> [113] highr_0.10                yaml_2.3.6                #> [115] BiocSingular_1.12.0       locfit_1.5-9.7            #> [117] survMisc_0.5.6            pbmcapply_1.5.1           #> [119] sass_0.4.4                tools_4.2.2               #> [121] timechange_0.2.0          parallel_4.2.2            #> [123] circlize_0.4.15           gamlss.dist_6.0-5         #> [125] foreach_1.5.2             gridExtra_2.3             #> [127] farver_2.1.1              digest_0.6.31             #> [129] BiocManager_1.30.19       quadprog_1.5-8            #> [131] Rcpp_1.0.9                car_3.1-1                 #> [133] broom_1.0.2               httr_1.4.4                #> [135] survminer_0.4.9           AnnotationDbi_1.58.0      #> [137] colorspace_2.0-3          rvest_1.0.3               #> [139] XML_3.99-0.13             fs_1.5.2                  #> [141] splines_4.2.2             pkgdown_2.0.7             #> [143] systemfonts_1.0.4         xtable_1.8-4              #> [145] jsonlite_1.8.4            ggfun_0.0.9               #> [147] R6_2.5.1                  pillar_1.8.1              #> [149] htmltools_0.5.4           glue_1.6.2                #> [151] fastmap_1.1.0             BiocParallel_1.32.5       #> [153] class_7.3-21              codetools_0.2-19          #> [155] mvtnorm_1.1-3             utf8_1.2.2                #> [157] lattice_0.20-45           bslib_0.4.2               #> [159] curl_5.0.0                ggbeeswarm_0.7.1          #> [161] limma_3.54.0              rmarkdown_2.19            #> [163] desc_1.4.2                munsell_0.5.0             #> [165] e1071_1.7-12              GetoptLong_1.0.5          #> [167] rhdf5_2.42.0              GenomeInfoDbData_1.2.9    #> [169] iterators_1.0.14          HDF5Array_1.26.0          #> [171] haven_2.5.1               gtable_0.3.1"},{"path":"/articles/scDesign3-spatial-vignette.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Simulate spatial transcriptomic data","text":"tutorial, show use scDesign3 simulate single-cell spatial data.","code":""},{"path":"/articles/scDesign3-spatial-vignette.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"Simulate spatial transcriptomic data","text":"raw data Seurat, dataset generated Visium technology 10x Genomics. pre-select top spatial variable genes. save time, subset top 10 genes.","code":"example_sce <- readRDS((url(\"https://www.dropbox.com/s/v1uazcl2glirmfe/VISIUM_sce.rds?raw=1\"))) print(example_sce) #> class: SingleCellExperiment  #> dim: 1000 2696  #> metadata(0): #> assays(2): counts logcounts #> rownames(1000): Calb2 Gng4 ... Fndc5 Gda #> rowData names(0): #> colnames(2696): AAACAAGTATCTCCCA-1 AAACACCAATAACTGC-1 ... #>   TTGTTTCACATCCAGG-1 TTGTTTCCATACAACT-1 #> colData names(12): orig.ident nCount_Spatial ... spatial2 cell_type #> reducedDimNames(0): #> mainExpName: NULL #> altExpNames(0): example_sce <- example_sce[1:10, ]"},{"path":"/articles/scDesign3-spatial-vignette.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Simulate spatial transcriptomic data","text":", can use spatial dataset generate new data setting parameter mu_formula smooth terms spatial coordinates. , can create SinglecellExperiment object using synthetic count matrix store logcounts input synthetic SinglecellExperiment objects.","code":"set.seed(123) example_simu <- scdesign3(     sce = example_sce,     assay_use = \"counts\",     celltype = \"cell_type\",     pseudotime = NULL,     spatial = c(\"spatial1\", \"spatial2\"),     other_covariates = NULL,     mu_formula = \"s(spatial1, spatial2, bs = 'gp', k= 400)\",     sigma_formula = \"1\",     family_use = \"nb\",     n_cores = 2,     usebam = FALSE,     corr_formula = \"1\",     copula = \"gaussian\",     DT = TRUE,     pseudo_obs = FALSE,     return_model = FALSE,     nonzerovar = FALSE   ) logcounts(example_sce) <- log1p(counts(example_sce)) simu_sce <- example_sce counts(simu_sce) <- example_simu$new_count logcounts(simu_sce) <- log1p(counts(simu_sce))"},{"path":"/articles/scDesign3-spatial-vignette.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Simulate spatial transcriptomic data","text":"reformat reference data synthetic data visualize genes’ expressions spatial locations.","code":"VISIUM_dat_test <- data.frame(t(log1p(counts(example_sce)))) %>% as_tibble() %>% dplyr::mutate(X = colData(example_sce)$spatial1, Y = colData(example_sce)$spatial2) %>% tidyr::pivot_longer(-c(\"X\", \"Y\"), names_to = \"Gene\", values_to = \"Expression\") %>% dplyr::mutate(Method = \"Reference\") VISIUM_dat_scDesign3 <- data.frame(t(log1p(counts(simu_sce)))) %>% as_tibble() %>% dplyr::mutate(X = colData(simu_sce)$spatial1, Y = colData(simu_sce)$spatial2) %>% tidyr::pivot_longer(-c(\"X\", \"Y\"), names_to = \"Gene\", values_to = \"Expression\") %>% dplyr::mutate(Method = \"scDesign3\") VISIUM_dat <- bind_rows(VISIUM_dat_test, VISIUM_dat_scDesign3) %>% dplyr::mutate(Method = factor(Method, levels = c(\"Reference\", \"scDesign3\")))  VISIUM_dat %>% filter(Gene %in% rownames(example_sce)[1:5]) %>% ggplot(aes(x = X, y = Y, color = Expression)) + geom_point(size = 0.5) + scale_colour_gradientn(colors = viridis_pal(option = \"magma\")(10), limits=c(0, 8)) + coord_fixed(ratio = 1) + facet_grid(Method ~ Gene )+ theme_gray()"},{"path":"/articles/scDesign3-spatial-vignette.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Simulate spatial transcriptomic data","text":"","code":"sessionInfo() #> R version 4.2.2 Patched (2022-11-10 r83330) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] viridis_0.6.2               viridisLite_0.4.1           #>  [3] dplyr_1.0.10                ggplot2_3.4.0               #>  [5] SingleCellExperiment_1.20.0 SummarizedExperiment_1.28.0 #>  [7] Biobase_2.58.0              GenomicRanges_1.50.2        #>  [9] GenomeInfoDb_1.34.6         IRanges_2.32.0              #> [11] S4Vectors_0.36.1            BiocGenerics_0.44.0         #> [13] MatrixGenerics_1.10.0       matrixStats_0.63.0          #> [15] scDesign3_0.99.1            BiocStyle_2.24.0            #>  #> loaded via a namespace (and not attached): #>  [1] tidyr_1.2.1            sass_0.4.4             jsonlite_1.8.4         #>  [4] splines_4.2.2          bslib_0.4.2            assertthat_0.2.1       #>  [7] highr_0.10             BiocManager_1.30.19    GenomeInfoDbData_1.2.9 #> [10] yaml_2.3.6             gamlss_5.4-10          pillar_1.8.1           #> [13] lattice_0.20-45        glue_1.6.2             digest_0.6.31          #> [16] XVector_0.38.0         colorspace_2.0-3       htmltools_0.5.4        #> [19] Matrix_1.5-1           pkgconfig_2.0.3        bookdown_0.31          #> [22] zlibbioc_1.44.0        mvtnorm_1.1-3          purrr_1.0.1            #> [25] scales_1.2.1           gamlss.data_6.0-2      tibble_3.1.8           #> [28] mgcv_1.8-41            farver_2.1.1           generics_0.1.3         #> [31] ellipsis_0.3.2         cachem_1.0.6           withr_2.5.0            #> [34] cli_3.6.0              survival_3.5-3         magrittr_2.0.3         #> [37] mclust_6.0.0           memoise_2.0.1          evaluate_0.19          #> [40] fs_1.5.2               fansi_1.0.3            nlme_3.1-162           #> [43] MASS_7.3-58.2          textshaping_0.3.6      tools_4.2.2            #> [46] lifecycle_1.0.3        stringr_1.5.0          munsell_0.5.0          #> [49] DelayedArray_0.24.0    gamlss.dist_6.0-5      compiler_4.2.2         #> [52] pkgdown_2.0.7          jquerylib_0.1.4        systemfonts_1.0.4      #> [55] rlang_1.0.6            grid_4.2.2             RCurl_1.98-1.9         #> [58] labeling_0.4.2         bitops_1.0-7           rmarkdown_2.19         #> [61] gtable_0.3.1           DBI_1.1.3              R6_2.5.1               #> [64] gridExtra_2.3          knitr_1.41             fastmap_1.1.0          #> [67] utf8_1.2.2             rprojroot_2.0.3        ragg_1.2.5             #> [70] desc_1.4.2             stringi_1.7.12         parallel_4.2.2         #> [73] vctrs_0.5.1            tidyselect_1.2.0       xfun_0.36"},{"path":"/articles/scDesign3.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"scDesign3 Quickstart","text":"scDesign3 unified probabilistic framework generates realistic silico high-dimensional single-cell omics data various cell states, including discrete cell types, continuous trajectories, spatial locations learning real datasets. Since functions scDesign3 comprehensive, introduce scDesign3 simulates scRNA-seq dataset one continuous developmental trajectory. information, please check Articles website: (https://songdongyuan1994.github.io/scDesign3/docs/index.html).","code":""},{"path":"/articles/scDesign3.html","id":"read-in-the-reference-data","dir":"Articles","previous_headings":"","what":"Read in the reference data","title":"scDesign3 Quickstart","text":"raw data scvelo, describes pancreatic endocrinogenesis. pre-select top 1000 highly variable genes filter cell types ensure single trajectory. save computational time, use top 100 genes.","code":"example_sce <- readRDS((url(\"https://www.dropbox.com/s/p1mvl5osxp55sot/PANCREAS_sce.rds?raw=1\"))) print(example_sce) #> class: SingleCellExperiment  #> dim: 1000 2087  #> metadata(5): clusters_coarse_colors clusters_colors day_colors #>   neighbors pca #> assays(6): X spliced ... cpm logcounts #> rownames(1000): Pyy Iapp ... Eya2 Kif21a #> rowData names(1): highly_variable_genes #> colnames(2087): AAACCTGAGAGGGATA AAACCTGGTAAGTGGC ... TTTGTCAAGTGACATA #>   TTTGTCAAGTGTGGCA #> colData names(7): clusters_coarse clusters ... sizeFactor pseudotime #> reducedDimNames(4): X_pca X_umap PCA UMAP #> mainExpName: NULL #> altExpNames(0): example_sce <- example_sce[1:100, ]"},{"path":"/articles/scDesign3.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"scDesign3 Quickstart","text":"function scdesign3() takes SinglecellExperiment object cell covariates (cell types, pesudotime, spatial coordinates) stored colData SinglecellExperiment object. output scdesign3() list includes: new_count: synthetic count matrix generated scdesign3(). parameter ncell set number different number cells input data, matrix new cell covariates used generating new data. parameter ncell default value, NULL. model_aic: vector include genes’ marginal models’ AIC, fitted copula’s AIC, total AIC, sum previous two AIC. model_bic: vector include genes’ marginal models’ BIC, fitted copula’s BIC, total BIC, sum previous two BIC. parameter return_model set TRUE, list contains fitted gam gamlss model genes input data. parameter return_model set default value FALSE, NULL. parameter return_model set TRUE, list contains either correlation matrix (copula = \"gaussian\") fitted vine copula (copula = \"vine) user specified correlation groups (based parameter corr_by). parameter return_model set default value FALSE, NULL. example, since change parameter ncell, synthetic count matrix dimension input count matrix. , can create SinglecellExperiment object using synthetic count matrix store logcounts input synthetic SinglecellExperiment objects.","code":"set.seed(123) example_simu <- scdesign3(     sce = example_sce,     assay_use = \"counts\",     celltype = \"cell_type\",     pseudotime = \"pseudotime\",     spatial = NULL,     other_covariates = NULL,     mu_formula = \"s(pseudotime, k = 10, bs = 'cr')\",     sigma_formula = \"s(pseudotime, k = 5, bs = 'cr')\",     family_use = \"nb\",     n_cores = 2,     usebam = FALSE,     corr_formula = \"1\",     copula = \"gaussian\",     DT = TRUE,     pseudo_obs = FALSE,     return_model = FALSE,     nonzerovar = FALSE   ) dim(example_simu$new_count) #> [1]  100 2087 logcounts(example_sce) <- log1p(counts(example_sce)) simu_sce <- example_sce counts(simu_sce) <- example_simu$new_count logcounts(simu_sce) <- log1p(counts(simu_sce))"},{"path":"/articles/scDesign3.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"scDesign3 Quickstart","text":"","code":"set.seed(123) compare_figure <- plot_reduceddim(ref_sce = example_sce,                                    sce_list = list(simu_sce),                                    name_vec = c(\"Reference\", \"scDesign3\"),                                   assay_use = \"logcounts\",                                    if_plot = TRUE,                                    color_by = \"pseudotime\",                                    n_pc = 20) plot(compare_figure$p_umap)"},{"path":"/articles/scDesign3.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"scDesign3 Quickstart","text":"","code":"sessionInfo() #> R version 4.2.2 Patched (2022-11-10 r83330) #> Platform: x86_64-pc-linux-gnu (64-bit) #> Running under: Ubuntu 20.04.5 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3 #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/liblapack.so.3 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> attached base packages: #> [1] stats4    stats     graphics  grDevices utils     datasets  methods   #> [8] base      #>  #> other attached packages: #>  [1] ggplot2_3.4.0               SingleCellExperiment_1.20.0 #>  [3] SummarizedExperiment_1.28.0 Biobase_2.58.0              #>  [5] GenomicRanges_1.50.2        GenomeInfoDb_1.34.6         #>  [7] IRanges_2.32.0              S4Vectors_0.36.1            #>  [9] BiocGenerics_0.44.0         MatrixGenerics_1.10.0       #> [11] matrixStats_0.63.0          scDesign3_0.99.1            #> [13] BiocStyle_2.24.0            #>  #> loaded via a namespace (and not attached): #>  [1] nlme_3.1-162           bitops_1.0-7           fs_1.5.2               #>  [4] rprojroot_2.0.3        tools_4.2.2            bslib_0.4.2            #>  [7] utf8_1.2.2             R6_2.5.1               irlba_2.3.5.1          #> [10] DBI_1.1.3              mgcv_1.8-41            colorspace_2.0-3       #> [13] withr_2.5.0            tidyselect_1.2.0       gridExtra_2.3          #> [16] compiler_4.2.2         textshaping_0.3.6      cli_3.6.0              #> [19] desc_1.4.2             DelayedArray_0.24.0    labeling_0.4.2         #> [22] bookdown_0.31          sass_0.4.4             scales_1.2.1           #> [25] mvtnorm_1.1-3          gamlss_5.4-10          askpass_1.1            #> [28] pkgdown_2.0.7          systemfonts_1.0.4      stringr_1.5.0          #> [31] digest_0.6.31          rmarkdown_2.19         XVector_0.38.0         #> [34] pkgconfig_2.0.3        htmltools_0.5.4        umap_0.2.9.0           #> [37] highr_0.10             fastmap_1.1.0          rlang_1.0.6            #> [40] farver_2.1.1           jquerylib_0.1.4        generics_0.1.3         #> [43] gamlss.data_6.0-2      jsonlite_1.8.4         mclust_6.0.0           #> [46] dplyr_1.0.10           RCurl_1.98-1.9         magrittr_2.0.3         #> [49] GenomeInfoDbData_1.2.9 Matrix_1.5-1           Rcpp_1.0.9             #> [52] munsell_0.5.0          fansi_1.0.3            reticulate_1.27        #> [55] viridis_0.6.2          lifecycle_1.0.3        stringi_1.7.12         #> [58] yaml_2.3.6             MASS_7.3-58.2          zlibbioc_1.44.0        #> [61] gamlss.dist_6.0-5      grid_4.2.2             parallel_4.2.2         #> [64] lattice_0.20-45        splines_4.2.2          knitr_1.41             #> [67] pillar_1.8.1           glue_1.6.2             evaluate_0.19          #> [70] BiocManager_1.30.19    vctrs_0.5.1            png_0.1-8              #> [73] gtable_0.3.1           openssl_2.0.5          purrr_1.0.1            #> [76] assertthat_0.2.1       cachem_1.0.6           xfun_0.36              #> [79] RSpectra_0.16-1        viridisLite_0.4.1      ragg_1.2.5             #> [82] survival_3.5-3         tibble_3.1.8           memoise_2.0.1"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dongyuan Song. Author, maintainer. Qingyang Wang. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Song, D., Wang, Q., Yan, G., Liu, T., & Li, J. J. (2022). unified framework realistic silico data generation statistical model inference single-cell spatial omics. bioRxiv, 2022-09.","code":"@Article{,   title = {A unified framework of realistic in silico data generation and statistical model inference for single-cell and spatial omics},   author = {Dongyuan Song and Qingyang Wang and Guanao Yan and Tianyang Liu and Jingyi Jessica Li},   journal = {bioRxiv},   pages = {2022--09},   year = {2022}, }"},{"path":"/index.html","id":"scdesign3","dir":"","previous_headings":"","what":"scDesign3","title":"A unified framework of realistic in silico data generation and statistical model inference for single-cell and spatial omics","text":"R package scDesign3 --one single-cell data simulation tool using reference datasets different cell states (cell types, trajectories spatial coordinates), different modalities (gene expression, chromatin accessibility, protein abundance, DNA methylation, etc), complex experimental designs. transparent parameters enable users alter models needed; model evaluation metrics (AIC, BIC) convenient visualization function help users select models. following illustration figure summarizes usage scDesign3:  find details scDesign3, can check preprint BioRxiv: Song, D., Wang, Q., Yan, G., Liu, T., & Li, J. J. (2022). unified framework realistic silico data generation statistical model inference single-cell spatial omics. bioRxiv.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"A unified framework of realistic in silico data generation and statistical model inference for single-cell and spatial omics","text":"install development version GitHub, please run: now working submitting Bioconductor provide link online.","code":"if (!require(\"devtools\", quietly = TRUE))     install.packages(\"devtools\") devtools::install_github(\"SONGDONGYUAN1994/scDesign3\")"},{"path":"/index.html","id":"quick-start","dir":"","previous_headings":"","what":"Quick Start","title":"A unified framework of realistic in silico data generation and statistical model inference for single-cell and spatial omics","text":"following code quick example running simulator. function scdesign3() takes SinglecellExperiment object cell covariates(cell types, pesudotime, spatial coordinates) stored colData SinglecellExperiment object. details SinlgeCellExperiment object, please check Bioconductor link. output scdesign3() list includes: new_count: synthetic count matrix generated scdesign3(). parameter ncell set number different number cells input data, matrix new cell covariates used generating new data. parameter ncell default value, NULL. model_aic: vector include genes’ marginal models’ AIC, fitted copula’s AIC, total AIC, sum previous two. model_bic: vector include genes’ marginal models’ BIC, fitted copula’s BIC, total BIC, sum previous two. parameter return_model set TRUE, list contains fitted gam gamlss model genes input data. may greatly increase object size. parameter return_model set default value FALSE, NULL. parameter return_model set TRUE, list contains either correlation matrix (copula = \"gaussian\") fitted Vine copula (copula = \"vine) user specified correlation groups (based parameter corr_by). parameter return_model set default value FALSE, NULL.","code":"example_simu <- scdesign3(     sce = example_sce,     assay_use = \"counts\",     celltype = \"cell_type\",     pseudotime = \"pseudotime\",     spatial = NULL,     other_covariates = NULL,     mu_formula = \"s(pseudotime, k = 10, bs = 'cr')\",     sigma_formula = \"s(pseudotime, k = 5, bs = 'cr')\",     family_use = \"nb\",     n_cores = 2,     usebam = FALSE,     corr_formula = \"1\",     copula = \"gaussian\",     DT = TRUE,     pseudo_obs = FALSE,     return_model = FALSE,     nonzerovar = FALSE   )"},{"path":"/index.html","id":"tutorials","dir":"","previous_headings":"","what":"Tutorials","title":"A unified framework of realistic in silico data generation and statistical model inference for single-cell and spatial omics","text":"detailed tutorials, please check website. tutorials demonstrate applications scDesign3 following four perspectives: data simulation, model parameters, model selection, model alteration. scDesign3 introduction Simulate datasets cell library siz Simulate datasets multiple lineages Simulate spatial transcriptomic data Simulate spot-resolution spatial data cell-type deconvolution Simulate single-cell ATAC-seq data Simulate CITE-seq data Simulate multi-omics data multiple single-omic datasets Simulate datasets batch effect Simulate datasets condition effect scDesign3 introduction scDesign3 marginal distribution genes Compare Gaussian copula Vine copula Evaluate clustering goodness--fit scDesign3 Evaluate pseudotime goodness--fit scDesign3 Simulate datasets /without batch effect Simulate datasets /without condition effect Simulate datasets DE test","code":""},{"path":"/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"A unified framework of realistic in silico data generation and statistical model inference for single-cell and spatial omics","text":"questions suggestions scDesign3 welcomed! Please report issues, contact Dongyuan Song (dongyuansong@ucla.edu) Qingyang Wang (qw802@g.ucla.edu).","code":""},{"path":"/index.html","id":"related-manuscripts","dir":"","previous_headings":"","what":"Related Manuscripts","title":"A unified framework of realistic in silico data generation and statistical model inference for single-cell and spatial omics","text":"scDesign: Li, W. V., & Li, J. J. (2019). statistical simulator scDesign rational scRNA-seq experimental design. Bioinformatics, 35(14), i41-i50. scDesign2: Sun, T., Song, D., Li, W. V., & Li, J. J. (2021). scDesign2: transparent simulator generates high-fidelity single-cell gene expression count data gene correlations captured. Genome biology, 22(1), 1-37. scReadSim: Yan, G., & Li, J. J. (2022). scReadSim: single-cell multi-omics read simulator. bioRxiv.","code":""},{"path":"/reference/ba.control.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions from gamlss/gamlss.add with bugs fixed — ba.control","title":"Functions from gamlss/gamlss.add with bugs fixed — ba.control","text":"control ba(). gamlss.add::ba.control() gamlss::bam().","code":""},{"path":"/reference/ba.control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions from gamlss/gamlss.add with bugs fixed — ba.control","text":"","code":"ba.control(   offset = NULL,   method = \"fREML\",   control = list(),   select = FALSE,   scale = 0,   gamma = 1,   knots = NULL,   sp = NULL,   min.sp = NULL,   paraPen = NULL,   chunk.size = 10000,   rho = 0,   AR.start = NULL,   discrete = TRUE,   cluster = NULL,   nthreads = 2,   gc.level = 1,   use.chol = FALSE,   samfrac = 1,   coef = NULL,   drop.unused.levels = TRUE,   drop.intercept = NULL,   ... )"},{"path":"/reference/ba.control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions from gamlss/gamlss.add with bugs fixed — ba.control","text":"offset offset formula. method method argument bam(). control list fit control parameters replace defaults returned gam.control. control parameters supplied stay default values. select select argument bam(). Determine selection penalties added smooth effects, can principle penalized model. scale scale parameter. positive taken known scale parameter. Negative signals scale paraemter unknown. 0 signals scale parameter 1 Poisson binomial unknown otherwise. gamma gamma argument bam(). Increase 1 force smoother fits. knots knots argument bam(). optional list containing user specified knot values used basis construction. sp sp argument bam(). vector smoothing parameters can provided . min.sp min.sp argument bam(). Lower bounds can supplied smoothing parameters. paraPen paraPen argument bam(). Optional list specifying penalties applied parametric model terms. chunk.size model matrix created chunks size, rather ever formed whole. rho AR1 error model can used residuals (based dataframe order), Gaussian-identity link models. AR1 correlation parameter. AR.start Logical variable length data, TRUE first observation independent section AR1 correlation. discrete method=\"fREML\" possible discretize covariates storage efficiency reasons. discrete TRUE, number vector numbers smoother term, discretization happens. numbers supplied give number discretization bins. cluster bam can compute computationally dominant QR decomposition parallel using parLapply parallel package, supplied cluster (cluster can cores single machine). nthreads Number threads use non-cluster computation (e.g. combining results cluster nodes). gc.level keep memory footprint , can help call garbage collector often, takes substatial amount time. Setting zero means garbage collection happens R decides . Setting 2 gives frequent garbage collection. 1 . use.chol default bam uses stable QR update approach obtaining QR decomposition model matrix. well conditioned models alternative accumulates crossproduct model matrix finds Choleski decomposition, end. somewhat efficient, computationally. samfrac large sample size Generalized additive models number iterations needed model fit can reduced first fitting model random sample data, using results supply starting values. initial fit run sloppy convergence tolerances, typically low cost. samfrac sampling fraction use. 0.1 often reasonable. coef Initial values model coefficients. drop.unused.levels default unused levels dropped factors fitting. smooths involving factor variables might want turn . drop.intercept Set TRUE force model really constant parametric model part, even factor variables present. ... arguments.","code":""},{"path":"/reference/ba.control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions from gamlss/gamlss.add with bugs fixed — ba.control","text":"control object","code":""},{"path":"/reference/ba.control.html","id":"ba-control","dir":"Reference","previous_headings":"","what":"ba.control","title":"Functions from gamlss/gamlss.add with bugs fixed — ba.control","text":"NA","code":""},{"path":"/reference/ba.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions from gamlss/gamlss.add with bugs fixed — ba","title":"Functions from gamlss/gamlss.add with bugs fixed — ba","text":"additive function used fitting GAMLSS models. interface bam() mgcv package.","code":""},{"path":"/reference/ba.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions from gamlss/gamlss.add with bugs fixed — ba","text":"","code":"ba(formula, control = ba.control(...), ...)"},{"path":"/reference/ba.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions from gamlss/gamlss.add with bugs fixed — ba","text":"formula formula model. control control model fitting. ... arguments.","code":""},{"path":"/reference/ba.html","id":"ba","dir":"Reference","previous_headings":"","what":"ba","title":"Functions from gamlss/gamlss.add with bugs fixed — ba","text":"NA","code":""},{"path":"/reference/construct_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct the input data (covaraite matrix and expression matrix) — construct_data","title":"Construct the input data (covaraite matrix and expression matrix) — construct_data","text":"function constructs input data fit_marginal.","code":""},{"path":"/reference/construct_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct the input data (covaraite matrix and expression matrix) — construct_data","text":"","code":"construct_data(   sce,   assay_use = \"counts\",   celltype,   pseudotime,   spatial,   other_covariates,   ncell = dim(sce)[2],   corr_by,   parallelization = \"mcmapply\",   BPPARAM = NULL )"},{"path":"/reference/construct_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct the input data (covaraite matrix and expression matrix) — construct_data","text":"sce SingleCellExperiment object. assay_use string indicates assay use sce. Default 'counts'. celltype string name cell type variable colData sce. Default 'cell_type'. pseudotime string string vector name pseudotime (exist) multiple lineages. Default NULL. spatial length two string vector names spatial coordinates. Defualt NULL. other_covariates string string vector covaraites want include data. ncell number cell want simulate. Default dim(sce)[2] (number input data). arbitrary number provided, fucntion use Vine Copula simulate new covaraite matrix. corr_by string string vector indicates groups correlation structure. '1', cells one estimated corr. 'ind', corr (features independent). others, variable decides corr structures. parallelization string indicating specific parallelization function use. Must one 'mcmapply', 'bpmapply', 'pbmcmapply', corresponds parallelization function package parallel,BiocParallel, pbmcapply respectively. default value 'mcmapply'. BPPARAM MulticoreParam object NULL. parameter parallelization = 'mcmapply' 'pbmcmapply', parameter must NULL. parameter parallelization = 'bpmapply',  parameter must one MulticoreParam object offered package 'BiocParallel. default value NULL.","code":""},{"path":"/reference/construct_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct the input data (covaraite matrix and expression matrix) — construct_data","text":"list components: count_mat expression matrix dat original covariate matrix newCovariate simulated new covariate matrix, NULL parameter ncell default","code":""},{"path":"/reference/construct_data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Construct the input data (covaraite matrix and expression matrix) — construct_data","text":"function takes SingleCellExperiment object input. Based users' choice, constructs matrix covaraites (explainary variables) expression matrix (e.g., count matrix scRNA-seq).","code":""},{"path":"/reference/construct_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct the input data (covaraite matrix and expression matrix) — construct_data","text":"","code":"data(example_sce)   my_data <- construct_data(   sce = example_sce,   assay_use = \"counts\",   celltype = \"cell_type\",   pseudotime = \"pseudotime\",   spatial = NULL,   other_covariates = NULL,   corr_by = \"1\"   ) #> Loading required package: SingleCellExperiment #> Loading required package: SummarizedExperiment #> Loading required package: MatrixGenerics #> Loading required package: matrixStats #>  #> Attaching package: ‘MatrixGenerics’ #> The following objects are masked from ‘package:matrixStats’: #>  #>     colAlls, colAnyNAs, colAnys, colAvgsPerRowSet, colCollapse, #>     colCounts, colCummaxs, colCummins, colCumprods, colCumsums, #>     colDiffs, colIQRDiffs, colIQRs, colLogSumExps, colMadDiffs, #>     colMads, colMaxs, colMeans2, colMedians, colMins, colOrderStats, #>     colProds, colQuantiles, colRanges, colRanks, colSdDiffs, colSds, #>     colSums2, colTabulates, colVarDiffs, colVars, colWeightedMads, #>     colWeightedMeans, colWeightedMedians, colWeightedSds, #>     colWeightedVars, rowAlls, rowAnyNAs, rowAnys, rowAvgsPerColSet, #>     rowCollapse, rowCounts, rowCummaxs, rowCummins, rowCumprods, #>     rowCumsums, rowDiffs, rowIQRDiffs, rowIQRs, rowLogSumExps, #>     rowMadDiffs, rowMads, rowMaxs, rowMeans2, rowMedians, rowMins, #>     rowOrderStats, rowProds, rowQuantiles, rowRanges, rowRanks, #>     rowSdDiffs, rowSds, rowSums2, rowTabulates, rowVarDiffs, rowVars, #>     rowWeightedMads, rowWeightedMeans, rowWeightedMedians, #>     rowWeightedSds, rowWeightedVars #> Loading required package: GenomicRanges #> Loading required package: stats4 #> Loading required package: BiocGenerics #>  #> Attaching package: ‘BiocGenerics’ #> The following objects are masked from ‘package:stats’: #>  #>     IQR, mad, sd, var, xtabs #> The following objects are masked from ‘package:base’: #>  #>     Filter, Find, Map, Position, Reduce, anyDuplicated, aperm, append, #>     as.data.frame, basename, cbind, colnames, dirname, do.call, #>     duplicated, eval, evalq, get, grep, grepl, intersect, is.unsorted, #>     lapply, mapply, match, mget, order, paste, pmax, pmax.int, pmin, #>     pmin.int, rank, rbind, rownames, sapply, setdiff, sort, table, #>     tapply, union, unique, unsplit, which.max, which.min #> Loading required package: S4Vectors #>  #> Attaching package: ‘S4Vectors’ #> The following objects are masked from ‘package:base’: #>  #>     I, expand.grid, unname #> Loading required package: IRanges #> Loading required package: GenomeInfoDb #> Loading required package: Biobase #> Welcome to Bioconductor #>  #>     Vignettes contain introductory material; view with #>     'browseVignettes()'. To cite Bioconductor, see #>     'citation(\"Biobase\")', and for packages 'citation(\"pkgname\")'. #>  #> Attaching package: ‘Biobase’ #> The following object is masked from ‘package:MatrixGenerics’: #>  #>     rowMedians #> The following objects are masked from ‘package:matrixStats’: #>  #>     anyMissing, rowMedians"},{"path":"/reference/example_sce.html","id":null,"dir":"Reference","previous_headings":"","what":"A SingelCellExperiment object containing both cell type and pseudotime — example_sce","title":"A SingelCellExperiment object containing both cell type and pseudotime — example_sce","text":"SingelCellExperiment object containing cell type pseudotime","code":""},{"path":"/reference/example_sce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A SingelCellExperiment object containing both cell type and pseudotime — example_sce","text":"","code":"data(\"example_sce\")"},{"path":"/reference/example_sce.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"A SingelCellExperiment object containing both cell type and pseudotime — example_sce","text":"dataset 10 rows (genes) 1289 cols (cells)","code":""},{"path":"/reference/extract_para.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the parameters of each cell's distribution — extract_para","title":"Extract the parameters of each cell's distribution — extract_para","text":"extract_para generates parameter matricies determine cell's distribution","code":""},{"path":"/reference/extract_para.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the parameters of each cell's distribution — extract_para","text":"","code":"extract_para(   sce,   marginal_list,   n_cores,   family_use,   new_covariate,   parallelization = \"mcmapply\",   BPPARAM = NULL,   data = NULL )"},{"path":"/reference/extract_para.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the parameters of each cell's distribution — extract_para","text":"sce SingleCellExperiment object. marginal_list list fitted regression models fit_marginal gene sce. n_cores integer. number cores use. family_use string marginal distribution. Must one 'poisson', 'nb', 'zip', 'zinb' 'gaussian', represent 'poisson distribution', 'negative binomial distribution', 'zero-inflated poisson distribution', 'zero-inflated negative binomail distribution', 'gaussian distribution' respectively. new_covariate data.frame contains covaraites targeted simulated data  construct_data correlation group assignment cell column 'corr_group'. parallelization string indicating specific parallelization function use. Must one 'mcmapply', 'bpmapply', 'pbmcmapply', corresponds parallelization function package parallel,BiocParallel, pbmcapply respectively. default value 'mcmapply'. BPPARAM MulticoreParam object NULL. parameter parallelization = 'mcmapply' 'pbmcmapply', parameter must NULL. parameter parallelization = 'bpmapply',  parameter must one MulticoreParam object offered package 'BiocParallel. default value NULL. data dataframe used fitting gamlss model","code":""},{"path":"/reference/extract_para.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the parameters of each cell's distribution — extract_para","text":"list components: mean_mat cell feature matrix mean parameter. sigma_mat cell feature matrix sigma parameter (Gaussian, variance; NB, dispersion.). zero_mat cell feature matrix zero-inflation parameter (non-zero ZIP ZINB).","code":""},{"path":"/reference/extract_para.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract the parameters of each cell's distribution — extract_para","text":"function takes new covariate (use) construct_data marginal models fit_marginal.","code":""},{"path":"/reference/extract_para.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract the parameters of each cell's distribution — extract_para","text":"","code":"data(example_sce)   my_data <- construct_data(   sce = example_sce,   assay_use = \"counts\",   celltype = \"cell_type\",   pseudotime = \"pseudotime\",   spatial = NULL,   other_covariates = NULL,   corr_by = \"1\"   )   my_marginal <- fit_marginal(   data = my_data,   mu_formula = \"s(pseudotime, bs = 'cr', k = 10)\",   sigma_formula = \"1\",   family_use = \"nb\",   n_cores = 1,   usebam = FALSE   )   my_copula <- fit_copula(   sce = example_sce,   assay_use = \"counts\",   marginal_list = my_marginal,   family_use = c(rep(\"nb\", 5), rep(\"zip\", 5)),   copula = \"vine\",   n_cores = 1,   new_covariate = NULL,   input_data = my_data$dat   ) #> Convert Residuals to Uniform #> Converting End #> Copula group 1 starts #> Vine Copula Estimation Starts #> Time difference of 0.1391799 secs #> Vine Copula Estimation Ends   my_para <- extract_para(     sce = example_sce,     marginal_list = my_marginal,     n_cores = 1,     family_use = c(rep(\"nb\", 5), rep(\"zip\", 5)),     new_covariate = NULL,     data = my_data$dat   )"},{"path":"/reference/fit_copula.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit the copula model — fit_copula","title":"Fit the copula model — fit_copula","text":"fit_copula fits copula model.","code":""},{"path":"/reference/fit_copula.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit the copula model — fit_copula","text":"","code":"fit_copula(   sce,   assay_use,   input_data,   new_covariate = NULL,   marginal_list,   family_use,   copula = \"vine\",   DT = TRUE,   pseudo_obs = FALSE,   epsilon = 1e-06,   family_set = c(\"gaussian\", \"indep\"),   important_feature = rep(TRUE, dim(sce)[1]),   n_cores,   parallelization = \"mcmapply\",   BPPARAM = NULL )"},{"path":"/reference/fit_copula.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit the copula model — fit_copula","text":"sce SingleCellExperiment object. assay_use string indicates assay use sce. Default 'counts'. input_data input data, one output construct_data. new_covariate data.frame contains covariates targeted simulated data construct_data. marginal_list list fitted regression models fit_marginal. family_use string vector strings marginal distribution. Must one 'poisson', 'nb', 'zip', 'zinb' 'gaussian'. copula string copula choice. Must one 'gaussian' 'vine'. Default 'gaussian'. Note vine copula may better modeling high-dimensions, can slow features >1000. DT logic variable. TRUE, perform distributional transformation make discrete data 'continuous'. useful discrete distributions (e.g., Poisson, NB). Default TRUE. Note continuous data (e.g., Gaussian), DT make sense set FALSE. pseudo_obs logic variable. TRUE, use empirical quantiles instead theoretical quantiles fitting copula. Default FALSE. epsilon numeric variable preventing transformed quantiles collapse 0 1. family_set string string vector bivarate copula families. Default c(\"gaussian\", \"indep\"). important_feature string vector indicates whether gene used correlation estimation . string, string must \"auto\", indicates genes automatically selected based proportion zero expression across cells gene. Gene zero proportion greater 0.8 excluded form gene-gene correlation estimation. vector, logical vector length equal number genes sce. TRUE logical vector means corresponding gene included gene-gene correlation estimation FALSE logical vector means corresponding gene excluded gene-gene correlation estimation. default value vector length equal number inputted genes every value equals TRUE. n_cores integer. number cores use. parallelization string indicating specific parallelization function use. Must one 'mcmapply', 'bpmapply', 'pbmcmapply', corresponds parallelization function package parallel,BiocParallel, pbmcapply respectively. default value 'mcmapply'. BPPARAM MulticoreParam object NULL. parameter parallelization = 'mcmapply' 'pbmcmapply', parameter must NULL. parameter parallelization = 'bpmapply',  parameter must one MulticoreParam object offered package 'BiocParallel. default value NULL.","code":""},{"path":"/reference/fit_copula.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit the copula model — fit_copula","text":"list components: new_mvu matrix new multivariate uniform distribution copula. copula_list list fitted copula model. using Gaussian copula, list correlation matrices; vine, list vine objects. model_aic vector marginal AIC copula AIC. model_bic vector marginal BIC copula BIC.","code":""},{"path":"/reference/fit_copula.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit the copula model — fit_copula","text":"function takes result fit_marginal input fit copula model residuals.","code":""},{"path":"/reference/fit_copula.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit the copula model — fit_copula","text":"","code":"data(example_sce)   my_data <- construct_data(   sce = example_sce,   assay_use = \"counts\",   celltype = \"cell_type\",   pseudotime = \"pseudotime\",   spatial = NULL,   other_covariates = NULL,   corr_by = \"1\"   )   my_marginal <- fit_marginal(   data = my_data,   mu_formula = \"s(pseudotime, bs = 'cr', k = 10)\",   sigma_formula = \"1\",   family_use = \"nb\",   n_cores = 1,   usebam = FALSE   )   my_copula <- fit_copula(   sce = example_sce,   assay_use = \"counts\",   marginal_list = my_marginal,   family_use = c(rep(\"nb\", 5), rep(\"zip\", 5)),   copula = \"vine\",   n_cores = 1,   new_covariate = NULL,   input_data = my_data$dat   ) #> Convert Residuals to Uniform #> Converting End #> Copula group 1 starts #> Vine Copula Estimation Starts #> Time difference of 0.1199827 secs #> Vine Copula Estimation Ends"},{"path":"/reference/fit_marginal.html","id":null,"dir":"Reference","previous_headings":"","what":"Fit the marginal models — fit_marginal","title":"Fit the marginal models — fit_marginal","text":"fit_marginal fits per-feature regression models.","code":""},{"path":"/reference/fit_marginal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fit the marginal models — fit_marginal","text":"","code":"fit_marginal(   data,   predictor = \"gene\",   mu_formula,   sigma_formula,   family_use,   n_cores,   usebam,   parallelization = \"mcmapply\",   BPPARAM = NULL )"},{"path":"/reference/fit_marginal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fit the marginal models — fit_marginal","text":"data object construct_data. predictor string predictor gam/gamlss model. Default gene. essentially just name. mu_formula string mu parameter formula sigma_formula string sigma parameter formula family_use string vector strings marginal distribution. Must one 'binomial', 'poisson', 'nb', 'zip', 'zinb' 'gaussian', represent 'poisson distribution', 'negative binomial distribution', 'zero-inflated poisson distribution', 'zero-inflated negative binomail distribution', 'gaussian distribution' respectively. n_cores integer. number cores use. usebam logic variable. use bam acceleration. parallelization string indicating specific parallelization function use. Must one 'mcmapply', 'bpmapply', 'pbmcmapply', corresponds parallelization function package parallel,BiocParallel, pbmcapply respectively. default value 'mcmapply'. BPPARAM MulticoreParam object NULL. parameter parallelization = 'mcmapply' 'pbmcmapply', parameter must NULL. parameter parallelization = 'bpmapply',  parameter must one MulticoreParam object offered package 'BiocParallel. default value NULL.","code":""},{"path":"/reference/fit_marginal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fit the marginal models — fit_marginal","text":"list fitted regression models. length equal total feature number.","code":""},{"path":"/reference/fit_marginal.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fit the marginal models — fit_marginal","text":"function takes result construct_data input, fit regression models feature based users' specification.","code":""},{"path":"/reference/fit_marginal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fit the marginal models — fit_marginal","text":"","code":"data(example_sce)   my_data <- construct_data(   sce = example_sce,   assay_use = \"counts\",   celltype = \"cell_type\",   pseudotime = \"pseudotime\",   spatial = NULL,   other_covariates = NULL,   corr_by = \"1\"   )   my_marginal <- fit_marginal(   data = my_data,   mu_formula = \"s(pseudotime, bs = 'cr', k = 10)\",   sigma_formula = \"1\",   family_use = \"nb\",   n_cores = 1,   usebam = FALSE   )"},{"path":"/reference/ga.control.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions from gamlss/gamlss.add with bugs fixed — ga.control","title":"Functions from gamlss/gamlss.add with bugs fixed — ga.control","text":"control ga(). gamlss.add::ga.control() gamlss::gam().","code":""},{"path":"/reference/ga.control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions from gamlss/gamlss.add with bugs fixed — ga.control","text":"","code":"ga.control(   offset = NULL,   method = \"REML\",   optimizer = c(\"outer\", \"newton\"),   control = list(),   scale = 0,   select = FALSE,   knots = NULL,   sp = NULL,   min.sp = NULL,   H = NULL,   gamma = 1,   paraPen = NULL,   in.out = NULL,   drop.unused.levels = TRUE,   drop.intercept = NULL,   discrete = FALSE,   ... )"},{"path":"/reference/ga.control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions from gamlss/gamlss.add with bugs fixed — ga.control","text":"offset offset formula. method smoothing parameter estimation method. optimizer array specifying numerical optimization method use optimize smoothing parameter estimation criterion (given method) control list fit control parameters replace defaults returned gam.control. scale positive taken known scale parameter. Negative signals scale parameter unknown. 0 signals scale parameter 1 Poisson binomial unknown otherwise. select TRUE gam() can add extra penalty term can penalized zero. knots optional list containing user specified knot values used basis construction. sp vector smoothing parameters can provided . min.sp Lower bounds can supplied smoothing parameters. H user supplied fixed quadratic penalty parameters GAM can supplied, coefficient matrix. gamma Increase beyond 1 produce smoother models. paraPen Optional list specifying penalties applied parametric model terms. .Optional list initializing outer iteration. drop.unused.levels default unused levels dropped factors fitting. smooths involving factor variables might want turn . drop.intercept Set TRUE force model really constant parametric model part, even factor variables present. Can vector formula list. discrete Experimental option setting models use discrete methods employed bam. ... arguments","code":""},{"path":"/reference/ga.control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions from gamlss/gamlss.add with bugs fixed — ga.control","text":"control object","code":""},{"path":"/reference/ga.control.html","id":"ga-control","dir":"Reference","previous_headings":"","what":"ga.control","title":"Functions from gamlss/gamlss.add with bugs fixed — ga.control","text":"NA","code":""},{"path":"/reference/ga.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions from gamlss/gamlss.add with bugs fixed — ga","title":"Functions from gamlss/gamlss.add with bugs fixed — ga","text":"additive function used fitting GAMLSS models. interface gam() mgcv package.","code":""},{"path":"/reference/ga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions from gamlss/gamlss.add with bugs fixed — ga","text":"","code":"ga(formula, envir, control = ga.control(...), ...)"},{"path":"/reference/ga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions from gamlss/gamlss.add with bugs fixed — ga","text":"formula formula model. envir environment. control control model fitting. ... arguments.","code":""},{"path":"/reference/ga.html","id":"ga","dir":"Reference","previous_headings":"","what":"ga","title":"Functions from gamlss/gamlss.add with bugs fixed — ga","text":"NA","code":""},{"path":"/reference/gamlss.ba.html","id":null,"dir":"Reference","previous_headings":"","what":"Support for Function ba() — gamlss.ba","title":"Support for Function ba() — gamlss.ba","text":"support  smoother functions ba() intefaces Simon Woood's bam() functions package mgcv. intended called directly users. gamlss.add::gamlss.ba.","code":""},{"path":"/reference/gamlss.ba.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Support for Function ba() — gamlss.ba","text":"","code":"gamlss.ba(x, y, w, xeval = NULL, ...)"},{"path":"/reference/gamlss.ba.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Support for Function ba() — gamlss.ba","text":"x explanatory variables y Iterative y variable w Iterative weights xeval xeval=TRUE predicion used ... arguments","code":""},{"path":"/reference/gamlss.ga.html","id":null,"dir":"Reference","previous_headings":"","what":"Support for Function ga() — gamlss.ga","title":"Support for Function ga() — gamlss.ga","text":"support  smoother functions ga() intefaces Simon Woood's gam() functions package mgcv. intended called directly users. gamlss.add::gamlss.ga.","code":""},{"path":"/reference/gamlss.ga.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Support for Function ga() — gamlss.ga","text":"","code":"gamlss.ga(x, y, w, xeval = NULL, ...)"},{"path":"/reference/gamlss.ga.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Support for Function ga() — gamlss.ga","text":"x explanatory variables y Iterative y variable w Iterative weights xeval xeval=TRUE predicion used ... arguments","code":""},{"path":"/reference/model.frame.gamlss.html","id":null,"dir":"Reference","previous_headings":"","what":"Functions from gamlss/gamlss.add with bugs fixed — model.frame.gamlss","title":"Functions from gamlss/gamlss.add with bugs fixed — model.frame.gamlss","text":"gamlss versions generic function model.frame","code":""},{"path":"/reference/model.frame.gamlss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Functions from gamlss/gamlss.add with bugs fixed — model.frame.gamlss","text":"","code":"# S3 method for gamlss model.frame(   formula,   what = c(\"mu\", \"sigma\", \"nu\", \"tau\"),   parameter = NULL,   ... )"},{"path":"/reference/model.frame.gamlss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Functions from gamlss/gamlss.add with bugs fixed — model.frame.gamlss","text":"formula formula model. parameter extract model.frame, terms model.frame. parameter Equivalent . ... arguments.","code":""},{"path":"/reference/model.frame.gamlss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Functions from gamlss/gamlss.add with bugs fixed — model.frame.gamlss","text":"vector matrix predicted values.","code":""},{"path":"/reference/model.frame.gamlss.html","id":"model-frame-gamlss","dir":"Reference","previous_headings":"","what":"model.frame.gamlss","title":"Functions from gamlss/gamlss.add with bugs fixed — model.frame.gamlss","text":"NA","code":""},{"path":"/reference/perform_lrt.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform the likelihood ratio test — perform_lrt","title":"Perform the likelihood ratio test — perform_lrt","text":"perform_lrt performs likelihood ratio test compare two list marginal models.","code":""},{"path":"/reference/perform_lrt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform the likelihood ratio test — perform_lrt","text":"","code":"perform_lrt(alter_marginal, null_marginal)"},{"path":"/reference/perform_lrt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform the likelihood ratio test — perform_lrt","text":"alter_marginal list marginal models alternative hypothesis. null_marginal list marginal models null hypothesis. must strictly nested alternative model.","code":""},{"path":"/reference/perform_lrt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform the likelihood ratio test — perform_lrt","text":"data.frame LRT result.","code":""},{"path":"/reference/perform_lrt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform the likelihood ratio test — perform_lrt","text":"function takes two lists marginal models (default, first list alternative second null) fit_marginal. Note LRT makes sense NESTED models.","code":""},{"path":"/reference/perform_lrt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform the likelihood ratio test — perform_lrt","text":"","code":"data(example_sce) my_data <- construct_data( sce = example_sce, assay_use = \"counts\", celltype = \"cell_type\", pseudotime = \"pseudotime\", spatial = NULL, other_covariates = NULL, corr_by = \"cell_type\" )  my_data2 <- construct_data(   sce = example_sce,   assay_use = \"counts\",   celltype = \"cell_type\",   pseudotime = \"pseudotime\",   spatial = NULL,   other_covariates = NULL,   corr_by = \"pseudotime\",   ncell = 10000 )  my_marginal1 <- fit_marginal(   data = my_data,   mu_formula = \"1\",   sigma_formula = \"1\",   family_use = \"nb\",   n_cores = 1,   usebam = FALSE ) my_marginal2 <- fit_marginal(   data = my_data,   mu_formula = \"s(pseudotime, bs = 'cr', k = 10)\",   sigma_formula = \"1\",   family_use = \"nb\",   n_cores = 1,   usebam = FALSE ) my_pvalue <- perform_lrt(my_marginal2, my_marginal1)"},{"path":"/reference/plot_reduceddim.html","id":null,"dir":"Reference","previous_headings":"","what":"Dimensionality reduction and visualization\nplot_reduceddim performs the dimensionality reduction\non the reference data, projects the synthetic datasets on the same low dimensional space,\nthen visualize the results. — plot_reduceddim","title":"Dimensionality reduction and visualization\nplot_reduceddim performs the dimensionality reduction\non the reference data, projects the synthetic datasets on the same low dimensional space,\nthen visualize the results. — plot_reduceddim","text":"Dimensionality reduction visualization plot_reduceddim performs dimensionality reduction reference data, projects synthetic datasets low dimensional space, visualize results.","code":""},{"path":"/reference/plot_reduceddim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dimensionality reduction and visualization\nplot_reduceddim performs the dimensionality reduction\non the reference data, projects the synthetic datasets on the same low dimensional space,\nthen visualize the results. — plot_reduceddim","text":"","code":"plot_reduceddim(   ref_sce,   sce_list,   name_vec,   assay_use = \"logcounts\",   n_pc = 50,   center = TRUE,   scale. = TRUE,   if_plot = TRUE,   shape_by = NULL,   color_by )"},{"path":"/reference/plot_reduceddim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Dimensionality reduction and visualization\nplot_reduceddim performs the dimensionality reduction\non the reference data, projects the synthetic datasets on the same low dimensional space,\nthen visualize the results. — plot_reduceddim","text":"ref_sce reference sce. sce_list list synthetic sce. name_vec vector names dataset. length length(sce_list) + 1, first name ref_sce. assay_use string indicates assay use sce. Default 'logcounts'. n_pc integer number PCs. center logic value whether centering data PCA. Default TRUE. scale. logic value whether scaling data PCA. Default TRUE. if_plot logic value whether returning plot. FALSE, return reduced dimensions dataset. shape_by string indicates column colData used shape. color_by string indicates column colData used color.","code":""},{"path":"/reference/plot_reduceddim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Dimensionality reduction and visualization\nplot_reduceddim performs the dimensionality reduction\non the reference data, projects the synthetic datasets on the same low dimensional space,\nthen visualize the results. — plot_reduceddim","text":"ggplot dataframe reduced dimensions.","code":""},{"path":"/reference/predict.gamlss.html","id":null,"dir":"Reference","previous_headings":"","what":"fix bugs for the original predict.gamlss — predict.gamlss","title":"fix bugs for the original predict.gamlss — predict.gamlss","text":"fix bugs original predict.gamlss","code":""},{"path":"/reference/predict.gamlss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"fix bugs for the original predict.gamlss — predict.gamlss","text":"","code":"# S3 method for gamlss predict(   object,   what = c(\"mu\", \"sigma\", \"nu\", \"tau\"),   parameter = NULL,   newdata = NULL,   type = c(\"link\", \"response\", \"terms\"),   terms = NULL,   se.fit = FALSE,   data = NULL,   ... )"},{"path":"/reference/predict.gamlss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"fix bugs for the original predict.gamlss — predict.gamlss","text":"object gamlss object added parameter added newdata data frame type added terms added se.fit added data added","code":""},{"path":"/reference/predict.gamlss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"fix bugs for the original predict.gamlss — predict.gamlss","text":"num.","code":""},{"path":"/reference/scdesign3.html","id":null,"dir":"Reference","previous_headings":"","what":"The wrapper for the whole scDesign3 pipeline — scdesign3","title":"The wrapper for the whole scDesign3 pipeline — scdesign3","text":"scdesign3 takes input data, fits model ","code":""},{"path":"/reference/scdesign3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The wrapper for the whole scDesign3 pipeline — scdesign3","text":"","code":"scdesign3(   sce,   assay_use = \"counts\",   celltype,   pseudotime,   spatial,   other_covariates,   ncell = dim(sce)[2],   mu_formula,   sigma_formula = \"1\",   family_use = \"nb\",   n_cores = 2,   usebam = FALSE,   corr_formula,   copula = \"gaussian\",   DT = TRUE,   pseudo_obs = FALSE,   family_set = c(\"gauss\", \"indep\"),   important_feature = rep(TRUE, dim(sce)[1]),   nonnegative = TRUE,   nonzerovar = TRUE,   return_model = FALSE,   parallelization = \"mcmapply\",   BPPARAM = NULL )"},{"path":"/reference/scdesign3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The wrapper for the whole scDesign3 pipeline — scdesign3","text":"sce SingleCellExperiment object. assay_use string indicates assay use sce. Default 'counts'. Must one 'celltype', 'pseudotime' 'spatial'. celltype string name cell type variable colData sce. Default 'cell_type'. pseudotime string string vector name pseudotime (exist) multiple lineages. Default NULL. spatial length two string vector names spatial coordinates. Defualt NULL. other_covariates string string vector covariates want include data. ncell number cell want simulate. Default dim(sce)[2] (number input data). mu_formula string mu parameter formula sigma_formula string sigma parameter formula family_use string marginal distribution. Must one 'poisson', 'nb', 'zip', 'zinb' 'gaussian'. n_cores integer. number cores use. usebam logic variable. use bam acceleration. corr_formula string correlation structure. copula string copula choice. Must one 'gaussian' 'vine'. Default 'gaussian'. Note vine copula may better modeling high-dimensions, can slow features >1000. DT logic variable. TRUE, perform distributional transformation make discrete data 'continuous'. useful discrete distributions (e.g., Poisson, NB). Default TRUE. Note continuous data (e.g., Gaussian), DT make sense set FALSE. pseudo_obs logic variable. TRUE, use empirical quantiles instead theoretical quantiles fitting copula. Default FALSE. family_set string string vector bivariate copula families. Default c(\"gauss\", \"indep\"). important_feature string vector indicates whether gene used correlation estimation . string, string must \"auto\", indicates genes automatically selected based proportion zero expression across cells gene. Gene zero proportion greater 0.8 excluded form gene-gene correlation estimation. vector, logical vector length equal number genes sce. TRUE logical vector means corresponding gene included gene-gene correlation estimation FALSE logical vector means corresponding gene excluded gene-gene correlation estimation. default value vector length equal number inputted genes every value equals TRUE. nonnegative logical variable. TRUE, values < 0 synthetic data converted 0. Default TRUE (since expression matrix nonnegative). nonzerovar logical variable. TRUE, gene zero variance, cell replaced 1. designed avoiding potential errors, example, PCA. return_model logic variable. TRUE, marginal models copula models returned. Default FALSE. parallelization string indicating specific parallelization function use. Must one 'mcmapply', 'bpmapply', 'pbmcmapply', corresponds parallelization function package parallel,BiocParallel, pbmcapply respectively. default value 'mcmapply'. BPPARAM MulticoreParam object NULL. parameter parallelization = 'mcmapply' 'pbmcmapply', parameter must NULL. parameter parallelization = 'bpmapply',  parameter must one MulticoreParam object offered package 'BiocParallel. default value NULL.","code":""},{"path":"/reference/scdesign3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The wrapper for the whole scDesign3 pipeline — scdesign3","text":"list components: new_count matrix new simulated count (expression) matrix. new_covariate data.frame new covariate matrix. model_aic model AIC. marginal_list list marginal regression models return_model = TRUE. corr_list list correlation models (conditional copulas) return_model = TRUE.","code":""},{"path":"/reference/scdesign3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The wrapper for the whole scDesign3 pipeline — scdesign3","text":"","code":"data(example_sce) my_simu <- scdesign3( sce = example_sce, assay_use = \"counts\", celltype = \"cell_type\", pseudotime = \"pseudotime\", spatial = NULL, other_covariates = NULL, mu_formula = \"s(pseudotime, bs = 'cr', k = 10)\", sigma_formula = \"s(pseudotime, bs = 'cr', k = 3)\", family_use = c(rep(\"nb\", 5), rep(\"zip\", 5)), n_cores = 2, usebam = FALSE, corr_formula = \"pseudotime\", copula = \"vine\", DT = TRUE, pseudo_obs = FALSE, ncell = 1000, return_model = FALSE ) #> Input Data Construction Start #> Input Data Construction End #> Start Marginal Fitting #> Marginal Fitting End #> Start Copula Fitting #> Convert Residuals to Uniform #> Converting End #> Copula group 1 starts #> Vine Copula Estimation Starts #> Time difference of 0.03523207 secs #> Vine Copula Estimation Ends #> Copula group 2 starts #> Vine Copula Estimation Starts #> Time difference of 0.03944278 secs #> Vine Copula Estimation Ends #> Copula group 3 starts #> Vine Copula Estimation Starts #> Time difference of 0.0450201 secs #> Vine Copula Estimation Ends #> Copula group 4 starts #> Vine Copula Estimation Starts #> Time difference of 0.02421451 secs #> Vine Copula Estimation Ends #> Copula Fitting End #> Start Parameter Extraction #> Parameter #> Extraction End #> Start Generate New Data #> Use Copula to sample a multivariate quantile matrix #> Sample Copula group 1 starts #> Sample Copula group 2 starts #> Sample Copula group 3 starts #> Sample Copula group 4 starts #> New Data Generating End"},{"path":"/reference/simu_new.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate new data — simu_new","title":"Simulate new data — simu_new","text":"simu_new generates new simulated data based fitted marginal copula models.","code":""},{"path":"/reference/simu_new.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate new data — simu_new","text":"","code":"simu_new(   sce,   assay_use = \"counts\",   mean_mat,   sigma_mat,   zero_mat,   quantile_mat = NULL,   copula_list,   n_cores,   family_use,   nonnegative = TRUE,   nonzerovar = TRUE,   input_data,   new_covariate,   important_feature,   parallelization = \"mcmapply\",   BPPARAM = NULL )"},{"path":"/reference/simu_new.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate new data — simu_new","text":"sce SingleCellExperiment object. assay_use string indicates assay use sce. Default 'counts'. mean_mat cell feature matrix mean parameter. sigma_mat cell feature matrix sigma parameter. zero_mat cell feature matrix zero-inflation parameter. quantile_mat cell feature matrix multivariate quantile. copula_list list copulas generating multivariate quantile matrix. provided, quantile_mat must NULL. n_cores integer. number cores use. family_use string marginal distribution. Must one 'poisson', \"binomial\", 'nb', 'zip', 'zinb' 'gaussian'. nonnegative logical variable. TRUE, values < 0 synthetic data converted 0. Default TRUE (since expression matrix nonnegative). nonzerovar logical variable. TRUE, gene zero variance, cell replaced 1. designed avoiding potential errors, example, PCA. input_data input count matrix. new_covariate data.frame contains covariates targeted simulated data  construct_data. important_feature string vector indicates whether gene used correlation estimation . string, string must \"auto\", indicates genes automatically selected based proportion zero expression across cells gene. Gene zero proportion greater 0.8 excluded form gene-gene correlation estimation. vector, logical vector length equal number genes sce. TRUE logical vector means corresponding gene included gene-gene correlation estimation FALSE logical vector means corresponding gene excluded gene-gene correlation estimation. default value vector length equal number inputted genes every value equals TRUE. parallelization string indicating specific parallelization function use. Must one 'mcmapply', 'bpmapply', 'pbmcmapply', corresponds parallelization function package parallel,BiocParallel, pbmcapply respectively. default value 'mcmapply'. BPPARAM MulticoreParam object NULL. parameter parallelization = 'mcmapply' 'pbmcmapply', parameter must NULL. parameter parallelization = 'bpmapply',  parameter must one MulticoreParam object offered package 'BiocParallel. default value NULL.","code":""},{"path":"/reference/simu_new.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate new data — simu_new","text":"feature cell matrix new simulated count (expression) matrix.","code":""},{"path":"/reference/simu_new.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate new data — simu_new","text":"function takes new covariate (use) construct_data, parameter matricies extract_para multivariate Unifs fit_copula.","code":""},{"path":"/reference/simu_new.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate new data — simu_new","text":"","code":"data(example_sce)   my_data <- construct_data(   sce = example_sce,   assay_use = \"counts\",   celltype = \"cell_type\",   pseudotime = \"pseudotime\",   spatial = NULL,   other_covariates = NULL,   corr_by = \"1\"   )   my_marginal <- fit_marginal(   data = my_data,   mu_formula = \"s(pseudotime, bs = 'cr', k = 10)\",   sigma_formula = \"1\",   family_use = \"nb\",   n_cores = 1,   usebam = FALSE   )   my_copula <- fit_copula(   sce = example_sce,   assay_use = \"counts\",   marginal_list = my_marginal,   family_use = c(rep(\"nb\", 5), rep(\"zip\", 5)),   copula = \"vine\",   n_cores = 1,   new_covariate = NULL,   input_data = my_data$dat   ) #> Convert Residuals to Uniform #> Converting End #> Copula group 1 starts #> Vine Copula Estimation Starts #> Time difference of 0.1231782 secs #> Vine Copula Estimation Ends   my_para <- extract_para(     sce = example_sce,     marginal_list = my_marginal,     n_cores = 1,     family_use = c(rep(\"nb\", 5), rep(\"zip\", 5)),     new_covariate = NULL,     data = my_data$dat   )   my_newcount <- simu_new(   sce = example_sce,   mean_mat = my_para$mean_mat,   sigma_mat = my_para$sigma_mat,   zero_mat = my_para$zero_mat,   quantile_mat = NULL,   copula_list = my_copula$copula_list,   n_cores = 1,   family_use = c(rep(\"nb\", 5), rep(\"zip\", 5)),   input_data = my_data$dat,   new_covariate = my_data$new_covariate,   important_feature = my_copula$important_feature   ) #> Use Copula to sample a multivariate quantile matrix #> Sample Copula group 1 starts"}]
